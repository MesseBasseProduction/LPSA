/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/LPSA.js":
/*!************************!*\
  !*** ./src/js/LPSA.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _scss_LPSA_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/LPSA.scss */ \"./src/scss/LPSA.scss\");\n/* harmony import */ var _utils_DnD__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/DnD */ \"./src/js/utils/DnD.js\");\n/* harmony import */ var _utils_Notification__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Notification */ \"./src/js/utils/Notification.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\nwindow.notification = new _utils_Notification__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\nvar LPSA = /*#__PURE__*/function () {\n  /** @summary <h1>The global LPSA application class, which handles both UI, modelisation and computing.</h1>\n   * @author Arthur Beaulieu\n   * @since September 2024\n   * @description <blockquote>\n   * Providing the whole UI structure and events, so user can interact and performs the following :\n   * <ul>\n   *   <li>manage session database (load database, add entry, edit entry, delete entry, export databse, clear database) ;</li>\n   *   <li>provide input values to compare against the loaded database (additionnal controls over results amounts, precision threshold and tolerance threshold) ;</li>\n   *   <li>matching results displayed in order with confidence index.</li>\n   * </ul>\n   * For confidentiality purpose, no other spec will be defined.\n   * </blockquote> */\n  function LPSA() {\n    var _this = this;\n    _classCallCheck(this, LPSA);\n    /** @private\n     * @member {String} - The LPSA application version */\n    this._version = '0.0.7';\n\n    // ----- Studied values\n    /** @private\n     * @member {Array<Array<Number>>} - The sutied user input to compare against loaded database */\n    this._input = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\n    // ----- Results modificators\n    /** @private\n     * @member {Number} - The threshold to compare values in different tens */\n    this._tensThreshold = 0; // Tens tolerance threshold\n    /** @private\n     * @member {Number} - The amount of wanted results when comparing inputs to the loaded database */\n    this._resultsAmount = 1; // Amount of required results\n    /** @private\n     * @member {Number} - The minimal esults confidence required to display results */\n    this._precision = 75; // Results' minimal precision\n\n    // ----- Class internals\n    /** @private\n     * @member {Object} - The aside's scrollbar */\n    this._asideScroll = null; // Scrollbar inside aside\n    /** @private\n     * @member {Object} - The drag and drop controller to handle JSON dropping */\n    this._dndController = null; // Handle db drag'n'drop into UI\n    /** @private\n     * @member {Object} - The loaded database */\n    this._db = null; // Session database\n\n    // ----- App performances\n    /** @private\n     * @member {Object} - Holds the performance timing measures */\n    this._perf = {\n      db: {\n        m1: null,\n        m2: null\n      },\n      analysis: {\n        m1: null,\n        m2: null\n      }\n    };\n\n    // ----- Begin website initialization\n    this._initApp().then(this._events.bind(this)).then(this._finalizeInit.bind(this))[\"catch\"](function (err) {\n      window.notification.error({\n        message: \"Erreur fatale \\xE0 l'initialisation de l'application. Contactez le support\"\n      });\n      document.getElementById('feedback-label').innerHTML = \"Une ereur fatale est survenue \\xE0 l'initialisation de l'application, aucune fonctionnalit\\xE9 n'est accessible. Contactez le support.\";\n      console.error(\"LPSA v\".concat(_this._version, \" : Fatal error during initialization, please contact support with following error :\\n\"), err);\n    });\n  }\n\n  // ---- App initialization sequence\n\n  /** @method\n   * @name _initApp\n   * @static\n   * @memberof LPSA\n   * @description <blockquote>\n   * Initializes the drag and drop controller over the <main> DOM element, and tries to load a database stored in the local storage.\n   * If any databse is stored, it will be loaded in session and the aside will be filled with its data.\n   * </blockquote>\n   * @returns {Promise} Promise that is resolved if DnD controller is properly initialized, rejected otherwise */\n  return _createClass(LPSA, [{\n    key: \"_initApp\",\n    value: function _initApp() {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        try {\n          _this2._dndController = new _utils_DnD__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            target: '.dnd-container',\n            onDropFile: function onDropFile(fileInfo, data) {\n              if (fileInfo.type === 'application/json') {\n                // If dropped file is a .JSON file, proceed to fill database\n                _this2._fillDatabase(_utils_DnD__WEBPACK_IMPORTED_MODULE_1__[\"default\"].formatAsJSON(data.target.result));\n              } else {\n                // Notify user that dropped file isn't expected\n                window.notification.error({\n                  message: \"Format de fichier non pris en charge pour l'import de la base de donn\\xE9e\"\n                });\n                document.getElementById('feedback-label').innerHTML = \"Le fichier d\\xE9pos\\xE9 n'est pas au format support\\xE9 (.JSON).\";\n              }\n            }\n          });\n          // Try to load DB from local storage if any\n          var db = window.localStorage.getItem('session-db');\n          if (db !== null) {\n            _this2._fillDatabase(JSON.parse(db));\n          }\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    /** @method\n     * @name _events\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Allow every user interaction by listening to DOM events on specific UI elements.\n     * </blockquote>\n     * @returns {Promise} Promise that is resolved if all events are listened, rejected otherwise */\n  }, {\n    key: \"_events\",\n    value: function _events() {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        try {\n          // Number inputs\n          document.querySelector('#t1-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '0/0'));\n          document.querySelector('#t1-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '0/1'));\n          document.querySelector('#t1-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '0/2'));\n          document.querySelector('#t2-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/0'));\n          document.querySelector('#t2-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/1'));\n          document.querySelector('#t2-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/2'));\n          document.querySelector('#t3-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/0'));\n          document.querySelector('#t3-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/1'));\n          document.querySelector('#t3-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/2'));\n          // Aside inputs\n          document.querySelector('#aside-toggle').addEventListener('click', _this3._toggleAside.bind(_this3));\n          document.querySelector('#db-add').addEventListener('click', _this3._addDatabaseElement.bind(_this3));\n          document.querySelector('#db-save').addEventListener('click', _this3._exportDatabase.bind(_this3));\n          document.querySelector('#db-erase').addEventListener('click', _this3._clearDatabaseModal.bind(_this3));\n          // Result modificators\n          document.querySelector('#threshold-range').addEventListener('input', _this3._updateThresholdRange.bind(_this3));\n          document.querySelector('#results-range').addEventListener('input', _this3._updateResultsRange.bind(_this3));\n          document.querySelector('#precision-range').addEventListener('input', _this3._updatePrecisionRange.bind(_this3));\n          // Submission\n          document.querySelector('#clear-input').addEventListener('click', _this3._clearInputs.bind(_this3));\n          document.querySelector('#submit-input').addEventListener('click', _this3._submitInputs.bind(_this3));\n          // Blur modal event\n          document.querySelector('#info-button').addEventListener('click', _this3._infoModal.bind(_this3));\n          document.querySelector('#modal-overlay').addEventListener('click', _this3._closeModal.bind(_this3));\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    /** @method\n     * @name _finalizeInit\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Removes the loading overlay so that the app become visible and usable.\n     * </blockquote>\n     * @returns {Promise} Promise that is resolved when view is ready, rejected otherwise */\n  }, {\n    key: \"_finalizeInit\",\n    value: function _finalizeInit() {\n      return new Promise(function (resolve, reject) {\n        try {\n          document.querySelector('#loading-overlay').style.opacity = 0;\n          setTimeout(function () {\n            document.querySelector('#loading-overlay').style.display = 'none';\n            resolve();\n          }, 500); // Match animation duration in scss file\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    // ----- Input event callbacks\n\n    /** @method\n     * @name _toggleAside\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Either opens or closes the aside displaying the database values, depending of its current expand/collapse state.\n     * </blockquote> */\n  }, {\n    key: \"_toggleAside\",\n    value: function _toggleAside() {\n      if (document.getElementById('bd-viewer').classList.contains('opened')) {\n        document.getElementById('aside-toggle').innerHTML = '&rsaquo;';\n        document.getElementById('bd-viewer').classList.remove('opened');\n      } else {\n        document.getElementById('aside-toggle').innerHTML = '&lsaquo;';\n        document.getElementById('bd-viewer').classList.add('opened');\n      }\n    }\n\n    /** @method\n     * @name _updateInputNumber\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to update a given input either visually and in internal value.\n     * </blockquote> \n     * @param {String} inputString - The input position formatted x/y, x being the triplet number and y being the inpus position in triplet\n     * @param {Event} e - The associated input event */\n  }, {\n    key: \"_updateInputNumber\",\n    value: function _updateInputNumber(inputString, e) {\n      // First ensure inputString value is properly formatted\n      var whichInput = inputString.split('/');\n      if (whichInput.length !== 2) {\n        return;\n      }\n      // Now ensure inputString doesn't overflow [0,2]\n      if (whichInput[0] > 2 || whichInput[4] > 2) {\n        return;\n      }\n      // Ensure provided input is only numerical\n      var numericalRegex = /[0-9]|\\./;\n      if (!numericalRegex.test(e.target.value)) {\n        e.target.classList.add('error');\n        setTimeout(function () {\n          return e.target.classList.remove('error');\n        }, 1500);\n        e.target.value = null;\n        this._input[whichInput[0]][whichInput[1]] = 0; // Reset input value to avoid hybrid input state\n        return;\n      }\n      // Update the input field and store new value in internal input value\n      e.target.classList.add('success');\n      setTimeout(function () {\n        return e.target.classList.remove('success');\n      }, 1500);\n      this._input[whichInput[0]][whichInput[1]] = parseInt(e.target.value);\n    }\n\n    /** @method\n     * @name _updateThresholdRange\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to update the tens tolerance for analysis results.\n     * </blockquote>\n     * @param {Event} e - The associated input event */\n  }, {\n    key: \"_updateThresholdRange\",\n    value: function _updateThresholdRange(e) {\n      var value = e.target.value;\n      this._tensThreshold = parseInt(value); // Save value as integer\n      document.querySelector('#threshold-range-label').innerHTML = \"Tol\\xE9rance \".concat(value);\n    }\n\n    /** @method\n     * @name _updateResultsRange\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to update the amount of wanted results.\n     * </blockquote>\n     * @param {Event} e - The associated input event */\n  }, {\n    key: \"_updateResultsRange\",\n    value: function _updateResultsRange(e) {\n      var value = e.target.value;\n      this._resultsAmount = parseInt(value); // Save value as integer\n      document.querySelector('#results-range-label').innerHTML = \"Nombre de resultats \".concat(value);\n    }\n\n    /** @method\n     * @name _updatePrecisionRange\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to update the minimal required precision for results.\n     * </blockquote>\n     * @param {Event} e - The associated input event */\n  }, {\n    key: \"_updatePrecisionRange\",\n    value: function _updatePrecisionRange(e) {\n      var value = e.target.value;\n      this._precision = parseInt(value); // Save value as integer\n      document.querySelector('#precision-range-label').innerHTML = \"Pr\\xE9cision minimale : \".concat(value, \"%\");\n    }\n\n    /** @method\n     * @name _clearInputs\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to clear all inputs content.\n     * </blockquote>\n     * @param {Event} e - The associated click event */\n  }, {\n    key: \"_clearInputs\",\n    value: function _clearInputs(e) {\n      // Clear inputs\n      document.querySelector('#t1-1').value = null;\n      document.querySelector('#t1-2').value = null;\n      document.querySelector('#t1-3').value = null;\n      document.querySelector('#t2-1').value = null;\n      document.querySelector('#t2-2').value = null;\n      document.querySelector('#t2-3').value = null;\n      document.querySelector('#t3-1').value = null;\n      document.querySelector('#t3-2').value = null;\n      document.querySelector('#t3-3').value = null;\n      // Clear internal data\n      this._input = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n      // Blur button\n      e.target.blur();\n      window.notification.info({\n        message: \"Les champs en entr\\xE9e ont \\xE9t\\xE9 nettoy\\xE9s\"\n      });\n    }\n\n    /** @method\n     * @name _submitInputs\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to submit given inputs for analysis.\n     * </blockquote>\n     * @param {Event} e - The associated click event */\n  }, {\n    key: \"_submitInputs\",\n    value: function _submitInputs(e) {\n      // Ensure a db has been dropped first\n      if (this._db === null) {\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e n'est charg\\xE9e en m\\xE9moire\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Veuillez d'abord glisser-d\\xE9poser n'importe ou sur la page le JSON de donn\\xE9es.\";\n        e.target.blur();\n        return;\n      }\n      // Then ensure that there are more than 4 inputs filled\n      var isFilled = 0;\n      for (var i = 0; i < this._input.length; ++i) {\n        for (var j = 0; j < this._input[i].length; ++j) {\n          if (this._input[i][j] > 0) {\n            ++isFilled;\n          }\n        }\n      }\n      // Not enough filled data\n      if (isFilled < 4) {\n        window.notification.warning({\n          message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Cette serie comporte moins de 4/9 valeurs et n'est pas pertinente \\xE0 analyser.\";\n        e.target.blur();\n        return;\n      }\n      // Start analysis\n      this._performInputAnalysis(isFilled);\n    }\n\n    // ----- Local database handler (all allowed data manipulation)\n\n    /** @method\n     * @name _fillDatabase\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * With provided JSON, this method will fill the session database internally and will update the UI aside with this database.\n     * </blockquote>\n     * @param {Object} json - The database as parsed JSON, must comply with a format that won't be detailled here */\n  }, {\n    key: \"_fillDatabase\",\n    value: function _fillDatabase(json) {\n      var _this4 = this;\n      // Ensure the JSON data contains what we expect\n      if (!json.date || !json.data) {\n        window.notification.error({\n          message: \"Le contenu de la base de donn\\xE9e est mal format\\xE9\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Le fichier d\\xE9pos\\xE9 ne contiens pas les donn\\xE9es attentudes.\";\n        return;\n      }\n      // Measure db filling performances (starting point)\n      this._perf.db.m1 = performance.now();\n      // Clear any previous content\n      window.localStorage.removeItem('session-db');\n      document.getElementById('db-info').innerHTML = '';\n      document.getElementById('aside-content').innerHTML = '';\n      // Start the filling of the aside with current database information\n      var date = new Intl.DateTimeFormat('fr', {\n        // Format database date to FR locale\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }).format(new Date(json.date));\n      document.getElementById('feedback-label').innerHTML = \"Import de la base de donn\\xE9e du \".concat(date, \"...\");\n      document.getElementById('db-info').appendChild(this.__buildDatabaseInformation(json, date));\n      // Iterate database to fill series\n      for (var i = 0; i < json.data.length; ++i) {\n        var goFor = this.__buildDatabaseSeries(json.data[i], 'goFor', i);\n        document.getElementById('aside-content').appendChild(goFor);\n        var goAgainst = this.__buildDatabaseSeries(json.data[i], 'goAgainst', i);\n        document.getElementById('aside-content').appendChild(goAgainst);\n      }\n      // Save db locally and in storage\n      this._db = json;\n      window.localStorage.setItem('session-db', JSON.stringify(this._db));\n      // Create scrollbar for aside's content\n      this._asideScroll = new window.ScrollBar({\n        target: document.getElementById('aside-content'),\n        minSize: 200,\n        style: {\n          color: '#758C78'\n        }\n      });\n      // Ensure aside's content is rendered with RAF before asking for an update\n      requestAnimationFrame(this._asideScroll.updateScrollbar.bind(this._asideScroll));\n      // Measure db filling performances (ending point)\n      this._perf.db.m2 = performance.now();\n      // Notify user in UI that everything is set\n      window.notification.success({\n        message: \"Base de donn\\xE9e du \".concat(date, \" charg\\xE9e\"),\n        CBtitle: 'Voir les données',\n        callback: function callback() {\n          return _this4._toggleAside();\n        }\n      });\n      document.getElementById('feedback-label').innerHTML = \"Base de donn\\xE9e du \".concat(date, \" charg\\xE9e en \").concat(((this._perf.db.m2 - this._perf.db.m1) / 1000).toFixed(3), \" seconde(s).\");\n    }\n\n    /** @method\n     * @name __buildDatabaseInformation\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Auxilliary method for <code>_fillDatabase</code> which returns a DOM object containing useful information about the database.\n     * </blockquote>\n     * @param {Object} db - The database as parsed JSON, must comply with a format that won't be detailled here\n     * @param {String} formattedDate - A formatted date as a string\n     * @returns {Object} A DOM element containing database useful information */\n  }, {\n    key: \"__buildDatabaseInformation\",\n    value: function __buildDatabaseInformation(db, formattedDate) {\n      var nbElem = 0;\n      for (var i = 0; i < db.data.length; ++i) {\n        nbElem += db.data[i].goFor.length;\n        nbElem += db.data[i].goAgainst.length;\n      }\n      var container = document.createElement('P');\n      container.innerHTML = \"\\n      \".concat(formattedDate, \" (version \").concat(db.version, \")<br>\\n      \").concat(nbElem, \" entr\\xE9e(s) en base\\n    \");\n      return container;\n    }\n\n    /** @method\n     * @name __buildDatabaseSeries\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Auxilliary method for <code>_fillDatabase</code> which returns a DOM object containing all information of a given data series.\n     * </blockquote>\n     * @param {Object} data - The database as parsed JSON, must comply with a format that won't be detailled here\n     * @param {String} type - Either 'goFor' or 'goAgainst' to specify which series is built here\n     * @param {String} i - The series' index, mostly used for edit/remove entry callback\n     * @returns {Object} A DOM element containing the stutied series */\n  }, {\n    key: \"__buildDatabaseSeries\",\n    value: function __buildDatabaseSeries(data, type, i) {\n      var _this5 = this;\n      // Create series title\n      var series = document.createElement('DIV');\n      series.classList.add('series');\n      series.innerHTML = \"\\n      <h2>S\\xE9rie \".concat(data.seriesLength, \"/9, parier <span class=\\\"go-\").concat(type.substring(2).toLowerCase(), \"\\\">\").concat(type === 'goFor' ? 'Pour' : 'Contre', \"</span><br><i>\").concat(data[type].length, \" entr\\xE9e(s)</i></h2>\\n    \");\n      // Create expander/collapser for studied series\n      var expandCollapse = document.createElement('DIV');\n      expandCollapse.innerHTML = '➖'; //➕\n      series.firstElementChild.appendChild(expandCollapse);\n      // Create container and iterate series entries to fill container with\n      var seriesContainer = document.createElement('DIV');\n      // Only iterate entries if any, display no results otherwise\n      if (data[type].length) {\n        var _loop = function _loop(j) {\n          // Build databse element\n          var element = _this5._buildDatabaseElement(data[type][j]);\n          // Edit element\n          var editButton = document.createElement('BUTTON');\n          editButton.addEventListener('click', function () {\n            _this5._editElementModal(i, j, type);\n          });\n          editButton.innerHTML = '✏️';\n          element.appendChild(editButton);\n          // Delete element\n          var deleteButton = document.createElement('BUTTON');\n          deleteButton.addEventListener('click', function () {\n            _this5._removeDatabaseElement(i, j, type);\n          });\n          deleteButton.innerHTML = '🗑️';\n          element.appendChild(deleteButton);\n          // Append element to series container\n          seriesContainer.appendChild(element);\n        };\n        for (var j = 0; j < data[type].length; ++j) {\n          _loop(j);\n        }\n      } else {\n        // No results in series\n        var element = document.createElement('P');\n        element.innerHTML = 'Aucune entrée pour cette catégorie';\n        seriesContainer.appendChild(element);\n      }\n      // Expand/collapse event\n      expandCollapse.addEventListener('click', function () {\n        if (expandCollapse.innerHTML === '➖') {\n          expandCollapse.innerHTML = '➕';\n          seriesContainer.style.display = 'none';\n        } else {\n          expandCollapse.innerHTML = '➖';\n          seriesContainer.style.display = 'inherit';\n        }\n        // Update scroll to ensure its re-computed with new height\n        requestAnimationFrame(_this5._asideScroll.updateScrollbar.bind(_this5._asideScroll));\n      });\n      // Final DOM chaining before returning element\n      series.appendChild(seriesContainer);\n      return series;\n    }\n\n    /** @method\n     * @name _buildDatabaseElement\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Generic method which returns a DOM object containing a database element.\n     * </blockquote>\n     * @param {Object} data - A databse entry, containing values, additionnal values and a comment\n     * @returns {Object} A DOM element containing the databse entry */\n  }, {\n    key: \"_buildDatabaseElement\",\n    value: function _buildDatabaseElement(data) {\n      var element = document.createElement('P');\n      var v = data.values;\n      element.innerHTML = \"\\n      <span class=\\\"value\\\">\".concat(v[0][0], \", \").concat(v[0][1], \", \").concat(v[0][2], \" / \").concat(v[1][0], \", \").concat(v[1][1], \", \").concat(v[1][2], \" / \").concat(v[2][0], \", \").concat(v[2][1], \", \").concat(v[2][2], \"</span>\\n    \");\n      // Additionnal content\n      if (data.additionnal.length > 0) {\n        var a = data.additionnal;\n        element.innerHTML += \"\\n        <span class=\\\"additionnal\\\">\".concat(a[0][0], \"-\").concat(a[0][1], \"-\").concat(a[0][2], \" / \").concat(a[1][0], \"-\").concat(a[1][1], \"-\").concat(a[1][2], \" / \").concat(a[2][0], \"-\").concat(a[2][1], \"-\").concat(a[2][2], \"</span>\\n      \");\n      } else {\n        element.innerHTML += \"\\n        <span class=\\\"additionnal\\\">-</span>\\n      \";\n      }\n      // Comment section\n      if (data.comment !== '') {\n        element.innerHTML += \"\\n        <span class=\\\"comment\\\">\".concat(data.comment, \"</span>\\n      \");\n      } else {\n        element.innerHTML += \"\\n        <span class=\\\"comment\\\">-</span>\\n      \";\n      }\n      return element;\n    }\n\n    /** @method\n     * @name _addDatabaseElement\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Callback method to open the new element database entry modal. It will create a default database if there isn't one already defined.\n     * </blockquote> */\n  }, {\n    key: \"_addDatabaseElement\",\n    value: function _addDatabaseElement() {\n      // if no db, create an empty one to element addition doesn't automatically fails\n      if (this._db === null) {\n        this._db = {\n          version: '1',\n          date: \"\".concat(new Date().toISOString().split('T')[0]),\n          data: JSON.parse('[{\"seriesLength\":4,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":5,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":6,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":7,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":8,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":9,\"goFor\":[],\"goAgainst\":[]}]')\n        };\n      }\n      // Request new element modal\n      this._addElementModal();\n    }\n\n    /** @method\n     * @name _editDatabaseElement\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Method to edit an existing entry in the database. It will update the aside's once the value has been updated.\n     * </blockquote>\n     * @param {Number} seriesNumber - The element associated series number\n     * @param {Number} elementNumber - The element associated number in the series\n     * @param {String} type - The element type ; either goFor' or 'goAgainst'\n     * @param {Object} element - The new element value (containing value, additionnal and comment keys) */\n  }, {\n    key: \"_editDatabaseElement\",\n    value: function _editDatabaseElement(seriesNumber, elementNumber, type, element) {\n      this._db.data[seriesNumber][type][elementNumber] = element;\n      this._fillDatabase(this._db);\n    }\n\n    /** @method\n     * @name _removeDatabaseElement\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Method to remove an existing entry in the database. It will update the aside's once the value has been updated.\n     * </blockquote>\n     * @param {Number} seriesNumber - The element associated series number\n     * @param {Number} elementNumber - The element associated number in the series\n     * @param {String} type - The element type ; either goFor' or 'goAgainst' */\n  }, {\n    key: \"_removeDatabaseElement\",\n    value: function _removeDatabaseElement(seriesNumber, elementNumber, type) {\n      this._db.data[seriesNumber][type].splice(elementNumber, 1);\n      this._fillDatabase(this._db);\n    }\n\n    /** @method\n     * @name _exportDatabase\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Method to export the loaded database as a .JSON file to the client.\n     * </blockquote> */\n  }, {\n    key: \"_exportDatabase\",\n    value: function _exportDatabase() {\n      if (this._db !== null) {\n        var link = document.createElement('A');\n        var data = this._db;\n        data.version = \"\".concat(parseInt(this._db.version) + 1);\n        data.date = new Date().toISOString().split('T')[0];\n        var file = new Blob([JSON.stringify(data)], {\n          type: 'text/plain'\n        });\n        link.href = URL.createObjectURL(file);\n        link.download = \"lpsa-dataset-\".concat(data.date, \".json\");\n        link.click();\n      } else {\n        document.getElementById('feedback-label').innerHTML = \"Aucune base de donn\\xE9e \\xE0 exporter.\";\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e \\xE0 exporter\"\n        });\n      }\n    }\n\n    /** @method\n     * @name _clearDatabase\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Method to remove the loaded database from the client session.\n     * </blockquote> */\n  }, {\n    key: \"_clearDatabase\",\n    value: function _clearDatabase() {\n      if (this._db) {\n        var date = this._db.date;\n        document.getElementById('feedback-label').innerHTML = \"Suppression de la base de donn\\xE9e du \".concat(date, \"...\");\n        document.getElementById('db-info').innerHTML = \"<p>Aucune information disponible, veuillez charger une base de donn\\xE9e.</p>\";\n        document.getElementById('aside-content').innerHTML = '<i>Aucune donnée chargée en session. Veuillez glisser/déposer un fichier (.JSON) de base de donnée nimporte où sur cette page.</i>'; // Clear previous content\n        window.localStorage.removeItem('session-db');\n        this._db = null;\n        document.getElementById('feedback-label').innerHTML = \"Base de donn\\xE9e supprim\\xE9e.\";\n        window.notification.success({\n          message: \"Base de donn\\xE9e du \".concat(date, \" supprim\\xE9e\")\n        });\n      } else {\n        document.getElementById('feedback-label').innerHTML = \"Aucune base de donn\\xE9e \\xE0 supprimer.\";\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e \\xE0 supprimer\"\n        });\n      }\n    }\n\n    /** @method\n     * @name _performInputAnalysis\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * After a valid input submitted, perform an analysis of input values against the session database, to retrieve matching results.\n     * </blockquote>\n     * @param {Number} length - The target series length to compare input with */\n  }, {\n    key: \"_performInputAnalysis\",\n    value: function _performInputAnalysis(length) {\n      document.getElementById('feedback-label').innerHTML = \"D\\xE9marrage de l'analyse, serie \\xE9valu\\xE9e \".concat(length, \"/9...\");\n      this._perf.analysis.m1 = performance.now();\n      // Select matching input from given length\n      var targetData = null;\n      for (var i = 0; i < this._db.data.length; ++i) {\n        if (this._db.data[i].seriesLength === length) {\n          targetData = this._db.data[i];\n          break;\n        }\n      }\n      // No matching length in db\n      if (targetData === null) {\n        window.notification.error({\n          message: \"Aucune donn\\xE9e \".concat(length, \"/9 \\xE0 comparer\")\n        });\n        document.getElementById('feedback-label').innerHTML = \"Aucune donn\\xE9e en base pour des s\\xE9ries evalu\\xE9s \".concat(length, \"/9.\");\n        return;\n      }\n      // Perform analysis\n      var goForCandidates = this.__computeCandidates(targetData.goFor);\n      var goAgainstCandidates = this.__computeCandidates(targetData.goAgainst);\n      // Perform sorting on result values by distance\n      goForCandidates = goForCandidates.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      goAgainstCandidates = goAgainstCandidates.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      this._resultsModal(goForCandidates, goAgainstCandidates);\n      // Search completed\n      this._perf.analysis.m2 = performance.now();\n      window.notification.success({\n        message: \"Analyse des donn\\xE9es termin\\xE9e\"\n      });\n      document.getElementById('feedback-label').innerHTML = \"Analyse de la serie termin\\xE9e :  \".concat(goForCandidates.length + goAgainstCandidates.length, \" r\\xE9sultat(s).\");\n    }\n\n    /** @method\n     * @name __computeCandidates\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Auxilliary method for <code>_performInputAnalysis</code> which computes the candidates for a given input according to user's criterias set through range sliders.\n     * </blockquote> \n     * @param {Array<Object>} targetArray - The target array to compare input with.\n     * @returns {Array<Object>} An array containing all candidates database entries which met the filtering criterias */\n  }, {\n    key: \"__computeCandidates\",\n    value: function __computeCandidates(targetArray) {\n      var outputCandidates = []; // In this aray, we store the distance value with input. The lower the best\n      for (var i = 0; i < targetArray.length; ++i) {\n        // Perform iteration on the 3 triplets\n        var distance = 0;\n        var usableCandidate = true; // Is the studied candidate worth adding to results\n        for (var j = 0; j < 3; ++j) {\n          for (var k = 0; k < 3; ++k) {\n            // We aim to compute a distance between target input and studied series.\n            // The distance is a substraction (in abs value) of those value\n            // If values are from a different tens, we ignore the comparison*\n            //* Depending on the tolerance threshold, we can compare number of different tens according to thresh value\n            var studiedTens = parseInt(\"\".concat(targetArray[i].values[j][k] / 10)[0]);\n            var inputTens = parseInt(\"\".concat(this._input[j][k] / 10)[0]);\n            // Don't compare valid input with db value at 0\n            if (this._input[j][k] !== 0 && targetArray[i].values[j][k] === 0) {\n              // Candidate is not relevant as a result -> do not compare input value facing a 0\n              usableCandidate = false;\n            } else {\n              if (studiedTens === inputTens) {\n                // First use case, tens are the same, compute distance\n                distance += Math.abs(targetArray[i].values[j][k] - this._input[j][k]);\n              } else if (Math.abs(targetArray[i].values[j][k] - this._input[j][k]) <= this._tensThreshold) {\n                // Otherwise, the absolute substraction is under or equal to tolerance threshold\n                distance += Math.abs(targetArray[i].values[j][k] - this._input[j][k]);\n              } else {\n                // Candidate is not relevant as a result (not same tens and beyond tolerance)\n                usableCandidate = false;\n              }\n            }\n          }\n        }\n        // Push result to array only if valid, and over required precision\n        if (usableCandidate === true && distance < 100 && 100 - distance >= this._precision) {\n          outputCandidates.push({\n            distance: distance,\n            series: targetArray[i]\n          });\n        }\n      }\n      return outputCandidates;\n    }\n\n    // ----- Modal related methods\n\n    /** @method\n     * @name _addElementModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Displays the new element modal, and handle its event to add a new element to the database if the input is valid.\n     * </blockquote> */\n  }, {\n    key: \"_addElementModal\",\n    value: function _addElementModal() {\n      var _this6 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/newelementmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#submit-save').addEventListener('click', function () {\n            var input = [[parseInt(overlay.querySelector('#v1-1').value) || 0, parseInt(overlay.querySelector('#v1-2').value) || 0, parseInt(overlay.querySelector('#v1-3').value) || 0], [parseInt(overlay.querySelector('#v2-1').value) || 0, parseInt(overlay.querySelector('#v2-2').value) || 0, parseInt(overlay.querySelector('#v2-3').value) || 0], [parseInt(overlay.querySelector('#v3-1').value) || 0, parseInt(overlay.querySelector('#v3-2').value) || 0, parseInt(overlay.querySelector('#v3-3').value) || 0]];\n            // Then ensure that there are more than 4 inputs filled\n            var isFilled = 0;\n            for (var i = 0; i < input.length; ++i) {\n              for (var j = 0; j < input[i].length; ++j) {\n                if (input[i][j] > 0) {\n                  ++isFilled;\n                }\n              }\n            }\n            // Not enough filled data\n            if (isFilled < 4) {\n              window.notification.warning({\n                message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n              });\n            } else {\n              var outputElement = {\n                values: input,\n                additionnal: [],\n                comment: overlay.querySelector('#comment').value\n              };\n              // Add additionnal values only if not null\n              if (!isNaN(parseInt(overlay.querySelector('#a1-1').value))) {\n                outputElement.additionnal = [[parseInt(overlay.querySelector('#a1-1').value) || 0, parseInt(overlay.querySelector('#a1-2').value) || 0, parseInt(overlay.querySelector('#a1-3').value) || 0], [parseInt(overlay.querySelector('#a2-1').value) || 0, parseInt(overlay.querySelector('#a2-2').value) || 0, parseInt(overlay.querySelector('#a2-3').value) || 0], [parseInt(overlay.querySelector('#a3-1').value) || 0, parseInt(overlay.querySelector('#a3-2').value) || 0, parseInt(overlay.querySelector('#a3-3').value) || 0]];\n              }\n              // Iterate DB to append new element in proper section\n              for (var _i = 0; _i < _this6._db.data.length; ++_i) {\n                if (_this6._db.data[_i].seriesLength === isFilled) {\n                  if (overlay.querySelector('#switch').checked) {\n                    _this6._db.data[_i].goAgainst.push(outputElement);\n                  } else {\n                    _this6._db.data[_i].goFor.push(outputElement);\n                  }\n                }\n              }\n              // Then update local database\n              _this6._fillDatabase(_this6._db);\n              _this6._closeModal({\n                srcElement: {\n                  id: 'close-button'\n                }\n              });\n            }\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n\n    /** @method\n     * @name _editElementModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Displays the edit element modal, and handle its event to edit the element in the database if the input is valid.\n     * </blockquote> \n     * @param {Number} seriesNumber - The element associated series number\n     * @param {Number} elementNumber - The element associated number in the series\n     * @param {String} type - The element type ; either goFor' or 'goAgainst' */\n  }, {\n    key: \"_editElementModal\",\n    value: function _editElementModal(seriesNumber, elementNumber, type) {\n      var _this7 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/newelementmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          // Fill UI with saved value\n          var element = _this7._db.data[seriesNumber][type][elementNumber];\n          overlay.querySelector('#switch').checked = type === 'goFor' ? false : true;\n          overlay.querySelector('#v1-1').value = element.values[0][0] || '';\n          overlay.querySelector('#v1-2').value = element.values[0][1] || '';\n          overlay.querySelector('#v1-3').value = element.values[0][2] || '';\n          overlay.querySelector('#v2-1').value = element.values[1][0] || '';\n          overlay.querySelector('#v2-2').value = element.values[1][1] || '';\n          overlay.querySelector('#v2-3').value = element.values[1][2] || '';\n          overlay.querySelector('#v3-1').value = element.values[2][0] || '';\n          overlay.querySelector('#v3-2').value = element.values[2][1] || '';\n          overlay.querySelector('#v3-3').value = element.values[2][2] || '';\n          // Only fill additionnal if any saved\n          if (element.additionnal.length === 3) {\n            overlay.querySelector('#a1-1').value = element.additionnal[0][0];\n            overlay.querySelector('#a1-2').value = element.additionnal[0][1];\n            overlay.querySelector('#a1-3').value = element.additionnal[0][2];\n            overlay.querySelector('#a2-1').value = element.additionnal[1][0];\n            overlay.querySelector('#a2-2').value = element.additionnal[1][1];\n            overlay.querySelector('#a2-3').value = element.additionnal[1][2];\n            overlay.querySelector('#a3-1').value = element.additionnal[2][0];\n            overlay.querySelector('#a3-2').value = element.additionnal[2][1];\n            overlay.querySelector('#a3-3').value = element.additionnal[2][2];\n          }\n          // Only update comment if any existing\n          if (element.comment !== '') {\n            overlay.querySelector('#comment').value = element.comment;\n          }\n          // Submit event listener\n          overlay.querySelector('#submit-save').addEventListener('click', function () {\n            var input = [[parseInt(overlay.querySelector('#v1-1').value) || 0, parseInt(overlay.querySelector('#v1-2').value) || 0, parseInt(overlay.querySelector('#v1-3').value) || 0], [parseInt(overlay.querySelector('#v2-1').value) || 0, parseInt(overlay.querySelector('#v2-2').value) || 0, parseInt(overlay.querySelector('#v2-3').value) || 0], [parseInt(overlay.querySelector('#v3-1').value) || 0, parseInt(overlay.querySelector('#v3-2').value) || 0, parseInt(overlay.querySelector('#v3-3').value) || 0]];\n            // Then ensure that there are more than 4 inputs filled\n            var isFilled = 0;\n            for (var i = 0; i < input.length; ++i) {\n              for (var j = 0; j < input[i].length; ++j) {\n                if (input[i][j] > 0) {\n                  ++isFilled;\n                }\n              }\n            }\n            // Not enough filled data\n            if (isFilled < 4) {\n              window.notification.warning({\n                message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n              });\n            } else {\n              var outputElement = {\n                values: input,\n                additionnal: [],\n                comment: overlay.querySelector('#comment').value\n              };\n              // Add additionnal values only if not null\n              if (!isNaN(parseInt(overlay.querySelector('#a1-1').value))) {\n                outputElement.additionnal = [[parseInt(overlay.querySelector('#a1-1').value) || 0, parseInt(overlay.querySelector('#a1-2').value) || 0, parseInt(overlay.querySelector('#a1-3').value) || 0], [parseInt(overlay.querySelector('#a2-1').value) || 0, parseInt(overlay.querySelector('#a2-2').value) || 0, parseInt(overlay.querySelector('#a2-3').value) || 0], [parseInt(overlay.querySelector('#a3-1').value) || 0, parseInt(overlay.querySelector('#a3-2').value) || 0, parseInt(overlay.querySelector('#a3-3').value) || 0]];\n              }\n              // Ensure the element has changed seriesType (ie was goFor, became goAgainst)\n              if (type === 'goFor' && overlay.querySelector('#switch').checked === true || type === 'goAgainst' && overlay.querySelector('#switch').checked === false || seriesNumber !== isFilled) {\n                // Remove from existing series type\n                _this7._removeDatabaseElement(seriesNumber, elementNumber, type);\n                // Now push in new seriesy type\n                for (var _i2 = 0; _i2 < _this7._db.data.length; ++_i2) {\n                  if (_this7._db.data[_i2].seriesLength === isFilled) {\n                    if (overlay.querySelector('#switch').checked) {\n                      _this7._db.data[_i2].goAgainst.push(outputElement);\n                    } else {\n                      _this7._db.data[_i2].goFor.push(outputElement);\n                    }\n                  }\n                }\n                // Manually update db\n                _this7._fillDatabase(_this7._db);\n              } else {\n                // Edit db element (will reload db itself) and close modal\n                _this7._editDatabaseElement(seriesNumber, elementNumber, type, outputElement);\n              }\n              _this7._closeModal({\n                srcElement: {\n                  id: 'close-button'\n                }\n              });\n            }\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n\n    /** @method\n     * @name _resultsModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Displays the results modal with all provided candidates, sorted by confidence and for each types\n     * </blockquote> \n     * @param {Array<Object>} goForCandidates - The candidates elements for 'goFor' type\n     * @param {Array<Object>} goAgainstCandidates - The candidates elements for 'goAgainst' type */\n  }, {\n    key: \"_resultsModal\",\n    value: function _resultsModal(goForCandidates, goAgainstCandidates) {\n      var _this8 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/resultsmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          // Update modal summary info\n          var v = _this8._input;\n          container.querySelector('#studied-series').innerHTML = \"\\n          \".concat(v[0][0], \", \").concat(v[0][1], \", \").concat(v[0][2], \" / \").concat(v[1][0], \", \").concat(v[1][1], \", \").concat(v[1][2], \" / \").concat(v[2][0], \", \").concat(v[2][1], \", \").concat(v[2][2], \"\\n        \");\n          container.querySelector('#study-stats').innerHTML = \"\\n          Un total de \".concat(goForCandidates.length + goAgainstCandidates.length, \" r\\xE9sultat(s) ont \\xE9t\\xE9 trouv\\xE9s dans la base de donn\\xE9e.<br>\\n          Ces r\\xE9sultats ont \\xE9t\\xE9 trouv\\xE9s en \").concat(((_this8._perf.db.m2 - _this8._perf.db.m1) / 1000).toFixed(3), \" seconde(s).<br><br>\\n          Le nombre de r\\xE9sultats \\xE0 afficher par cat\\xE9gorie est de <b>\").concat(_this8._resultsAmount, \"</b>.<br>\\n          La tol\\xE9rance pour les calculs entre dizaines est de <b>\").concat(_this8._tensThreshold, \"</b>.<br>\\n          La pr\\xE9cision minimale pour ces r\\xE9sultats est de <b>\").concat(_this8._precision, \"%</b>.\\n        \");\n          // Update GUI with best candidates\n          for (var i = 0; i < _this8._resultsAmount; ++i) {\n            // Only add goFor candidate if exists in results\n            if (goForCandidates[i]) {\n              var goForElement = _this8._buildDatabaseElement(goForCandidates[i].series);\n              var goForItem = document.createElement('DIV');\n              goForItem.classList.add('category-item');\n              goForItem.innerHTML = \"\\n              <h4>\".concat(100 - goForCandidates[i].distance, \"%</h4>\\n            \");\n              goForItem.appendChild(goForElement);\n              container.querySelector('#go-for').appendChild(goForItem);\n            } else if (container.querySelector('#go-for').innerHTML === '') {\n              var element = document.createElement('P');\n              element.innerHTML = '<b>Aucun résultats pour cette catégorie</b>';\n              container.querySelector('#go-for').appendChild(element);\n            }\n            // Same goes for goAgainst candidates\n            if (goAgainstCandidates[i]) {\n              var goAgainstElement = _this8._buildDatabaseElement(goAgainstCandidates[i].series);\n              var goAgainstItem = document.createElement('DIV');\n              goAgainstItem.classList.add('category-item');\n              goAgainstItem.innerHTML = \"\\n              <h4>\".concat(100 - goAgainstCandidates[i].distance, \"%</h4>\\n            \");\n              goAgainstItem.appendChild(goAgainstElement);\n              container.querySelector('#go-against').appendChild(goAgainstItem);\n            } else if (container.querySelector('#go-against').innerHTML === '') {\n              var _element = document.createElement('P');\n              _element.innerHTML = '<b>Aucun résultats pour cette catégorie</b>';\n              container.querySelector('#go-against').appendChild(_element);\n            }\n          }\n          var scroll = new window.ScrollBar({\n            target: container.querySelector('.results-wrapper'),\n            minSize: 200,\n            style: {\n              color: '#758C78'\n            }\n          });\n\n          // Force raf after scroll creation to make scrollbar properly visible\n          requestAnimationFrame(function () {\n            scroll.updateScrollbar();\n          });\n          overlay.appendChild(container);\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n\n    /** @method\n     * @name _clearDatabaseModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Acts like a confirm dialog before erasing the session database. Also provides a button to export locally the database.\n     * </blockquote> */\n  }, {\n    key: \"_clearDatabaseModal\",\n    value: function _clearDatabaseModal() {\n      var _this9 = this;\n      if (this._db === null) {\n        this._clearDatabase();\n        return;\n      }\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/cleardatabasemodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#save-button').addEventListener('click', function () {\n            _this9._exportDatabase();\n            _this9._closeModal({\n              srcElement: {\n                id: 'close-button'\n              }\n            });\n          });\n          overlay.querySelector('#confirm-button').addEventListener('click', function () {\n            _this9._clearDatabase();\n            _this9._closeModal({\n              srcElement: {\n                id: 'close-button'\n              }\n            });\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n\n    /** @method\n     * @name _infoModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Generic information about the website.\n     * </blockquote> */\n  }, {\n    key: \"_infoModal\",\n    value: function _infoModal() {\n      var _this10 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/infomodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#app-version').innerHTML = _this10._version;\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n\n    /** @method\n     * @name _closeModal\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Method to request a modal closure.\n     * </blockquote> \n     * @param {vent} e - The associated click event */\n  }, {\n    key: \"_closeModal\",\n    value: function _closeModal(e) {\n      if (e.srcElement.id !== 'modal-overlay' && e.srcElement.className !== 'close-modal' && e.srcElement.id !== 'close-button') {\n        return;\n      }\n      var overlay = document.getElementById('modal-overlay');\n      if (overlay.style.display === 'flex') {\n        overlay.style.opacity = 0;\n        setTimeout(function () {\n          overlay.innerHTML = '';\n          overlay.style = '';\n        }, 400);\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LPSA);\n\n//# sourceURL=webpack://LPSA/./src/js/LPSA.js?");

/***/ }),

/***/ "./src/js/utils/DnD.js":
/*!*****************************!*\
  !*** ./src/js/utils/DnD.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar DnD = /*#__PURE__*/function () {\n  /** @summary <h1>A DnD simple implementation to convert any DOM element into a drop content handler</h1>\r\n   * @author Arthur Beaulieu\r\n   * @since March 2019\r\n   * @description <blockquote>This class aims to propose a drag and drop abstraction, so you can focus on the dropped content handling only.\r\n   * Instantiate this with a DOM target, and a file handler callback in which you might do your treatments with the dropped file(s).</blockquote>\r\n   * @param {Object} options - The DnD class arguments object\r\n   * @param {String} options.target - The DnD target DOM element query selector\r\n   * @param {Function} options.onDropFile - The callback to call when a file is handled */\n  function DnD(options) {\n    _classCallCheck(this, DnD);\n    try {\n      /** @private\r\n       * @member {Object} - The DnD container DOM node */\n      this._container = document.querySelector(options.target); // Get given target from the DOM\n      /** @private\r\n       * @member {Function} - The file handler callback */\n      this._onDropFileCB = options.onDropFile; // Assign the onDropFile callback to an internal\n      /** @private\r\n       * @member {String} - The target default border rule (to properly restor border on leave/end) */\n      this._borderStyle = this._container.style.border; // Back target border style to restore it on leave/drop events\n      this._events(); // Attach all drag events\n    } catch (error) {\n      // Mostly handle the case in which the target selector given as an argument is wrong\n      console.error(\"Unable to build the DnD class.\\n\".concat(error));\n    }\n  }\n\n  /** @method\r\n   * @name formatAsJSON\r\n   * @static\r\n   * @memberof DnD\r\n   * @description <blockquote>Convert a raw dropped content into a JSON object</blockquote> */\n  return _createClass(DnD, [{\n    key: \"_events\",\n    value:\n    /** @method\r\n     * @name _events\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>Attach to the container all the needed drag/drop events</blockquote> */\n    function _events() {\n      this._container.addEventListener('dragenter', this._dragEnter.bind(this), false);\n      this._container.addEventListener('dragover', this._dragOver.bind(this), false);\n      this._container.addEventListener('dragleave', this._dragLeave.bind(this), false);\n      this._container.addEventListener('drop', this._drop.bind(this), false);\n    }\n\n    /** @method\r\n     * @name _eventBehavior\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>Stops the given event propagation and default behavior</blockquote>\r\n     * @param {Event} event - The event to change behavior from */\n  }, {\n    key: \"_eventBehavior\",\n    value: function _eventBehavior(event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n    /** @method\r\n     * @name _dragEnter\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User entered the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragEnter\",\n    value: function _dragEnter(event) {\n      this._eventBehavior(event);\n      this._container.style.border = 'dashed 6px rgb(255, 100, 100)';\n    }\n\n    /** @method\r\n     * @name _dragOver\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User hovers the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragOver\",\n    value: function _dragOver(event) {\n      this._eventBehavior(event);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n\n    /** @method\r\n     * @name _dragLeave\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User left the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragLeave\",\n    value: function _dragLeave(event) {\n      if (event.relatedTarget === null) {\n        this._eventBehavior(event);\n        this._container.style.border = this._borderStyle;\n      }\n    }\n\n    /** @method\r\n     * @name _drop\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User dropped content on the target div</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_drop\",\n    value: function _drop(event) {\n      var _this = this;\n      this._eventBehavior(event);\n      this._container.style.border = this._borderStyle;\n      var files = event.dataTransfer.files;\n      for (var i = 0; i < files.length; ++i) {\n        var reader = new FileReader();\n        reader.onload = function (theFile) {\n          return function (raw) {\n            _this._onDropFileCB(theFile, raw);\n          };\n        }(files[i]);\n        reader.readAsText(files[i]);\n      }\n    }\n  }], [{\n    key: \"formatAsJSON\",\n    value: function formatAsJSON(raw) {\n      return JSON.parse(raw);\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DnD);\n\n//# sourceURL=webpack://LPSA/./src/js/utils/DnD.js?");

/***/ }),

/***/ "./src/js/utils/Notification.js":
/*!**************************************!*\
  !*** ./src/js/utils/Notification.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _scss_utils_notification_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../scss/utils/notification.scss */ \"./src/scss/utils/notification.scss\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar Notification = /*#__PURE__*/function () {\n  /** @summary Create an instance of a notification handler\r\n   * @author Arthur Beaulieu\r\n   * @since June 2018\r\n   * @description Build the notification singleton handler that will handle all incoming Notifications\r\n   * @param {object} [options] - The notification handler global options\r\n   * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>\r\n   * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>\r\n   * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*\r\n   * @param {number} [options.transition=100] - Notification fade animation transition timing (in ms) in range N*\r\n   * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */\n  function Notification(options) {\n    _classCallCheck(this, Notification);\n    if (Notification.instance) {\n      return Notification.instance;\n    }\n    Notification.instance = this;\n    // Attributes declaration\n    /** @private\r\n     * @member {boolean} - Dismiss all operation in progress flag */\n    this._dismissAllLock = false;\n    /** @private\r\n     * @member {object} - Notification handler container node */\n    this._dom = {};\n    /** @private\r\n     * @member {object} - Active notifications object : retrieve a notification using its ID (this._active[ID]) */\n    this._active = {};\n    /** @private\r\n     * @member {object} - Queue notifications when max active has been reached */\n    this._queue = {};\n    /** @private\r\n     * @member {object} - Notification handler default values */\n    this._default = {};\n    /** @private\r\n     * @member {string} - The handler position in viewport - <i>top-left; top-right; bottom-left; bottom-right;</i> */\n    this._position = '';\n    /** @private\r\n     * @member {string} - The thick border position in the Notification - <i>top; bottom; left; right; none;</i> */\n    this._thickBorder = '';\n    /** @private\r\n     * @member {number} - The Notification on screen duration in ms */\n    this._duration = 0;\n    /** @private\r\n     * @member {number} - The fade transition time in ms */\n    this._transition = 0;\n    /** @private\r\n     * @member {number} - The maximum amount of active Notification */\n    this._maxActive = 0;\n    /** @public\r\n     * @member {number} - The component version */\n    this.version = '1.1.0';\n    // Build singleton and attach\n    this._init(options);\n    // Return singleton\n    return this;\n  }\n\n  /** @method\r\n   * @name destroy\r\n   * @public\r\n   * @memberof Notification\r\n   * @author Arthur Beaulieu\r\n   * @since March 2019\r\n   * @description Destroy the singleton and detach it from the DOM */\n  return _createClass(Notification, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n      document.body.removeChild(this._dom);\n      // Delete object attributes\n      Object.keys(this).forEach(function (key) {\n        delete _this[key];\n      });\n      // Clear singleton instance\n      Notification.instance = null;\n    }\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n    /*  ------------------------------  NOTIFICATION JS HANDLER CONSTRUCTION METHODS  --------------------------------  */\n    /*                                                                                                                  */\n    /*  The following methods only concerns the singleton creation. It handle all arguments and will fallback on        */\n    /*  default values if any argument doesn't meet its expected value or type.                                         */\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _init\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since July 2018\r\n     * @description Create the handler DOM element, set default values, test given options and properly add CSS class to the handler\r\n     * @param {object} [options] - The notification handler global options\r\n     * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>\r\n     * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>\r\n     * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*\r\n     * @param {number} [options.transition=100]  - Notification fade animation transition timing (in ms) in range N*\r\n     * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */\n  }, {\n    key: \"_init\",\n    value: function _init(options) {\n      // Declare options as object if empty\n      if (options === undefined) {\n        options = {};\n      }\n      // Create notification main container\n      this._dom = document.createElement('DIV'); // Notification handler DOM container\n      this._dom.classList.add('notification-container'); // Set proper CSS class\n      // Notification.js default values\n      this._default = {\n        handler: {\n          position: 'top-right',\n          thickBorder: 'top',\n          duration: 5000,\n          transition: 200,\n          maxActive: 10\n        },\n        notification: {\n          type: 'info',\n          message: '',\n          title: '',\n          iconless: false,\n          closable: true,\n          sticky: false,\n          renderTo: this._dom,\n          CBtitle: '',\n          callback: null,\n          isDimmed: false\n        },\n        color: {\n          success: 'rgb(76, 175, 80)',\n          info: 'rgb(3, 169, 244)',\n          warning: 'rgb(255, 152, 0)',\n          error: 'rgb(244, 67, 54)'\n        },\n        svgPath: {\n          success: 'M12.5 0C5.602 0 0 5.602 0 12.5S5.602 25 12.5 25 25 19.398 25 12.5 19.398 0 12.5 0zm-2.3 18.898l-5.5-5.5 1.8-1.796 3.7 3.699L18.5 7l1.8 1.8zm0 0',\n          info: 'M12.504.035a12.468 12.468 0 100 24.937 12.468 12.468 0 000-24.937zM15.1 19.359c-.643.25-1.153.445-1.537.576-.384.134-.825.199-1.333.199-.775 0-1.381-.192-1.813-.57a1.832 1.832 0 01-.642-1.442c0-.227.015-.459.047-.693.03-.24.083-.504.154-.806l.802-2.835c.069-.272.132-.527.182-.77.048-.244.069-.467.069-.668 0-.36-.075-.615-.223-.756-.153-.144-.437-.213-.857-.213-.207 0-.422.036-.639.095a9.914 9.914 0 00-.56.184l.213-.874a19.777 19.777 0 011.51-.549 4.48 4.48 0 011.361-.23c.77 0 1.368.19 1.784.56a1.857 1.857 0 01.626 1.452c0 .122-.012.341-.04.652a4.44 4.44 0 01-.162.856l-.798 2.831a8.133 8.133 0 00-.176.775c-.05.288-.075.51-.075.66 0 .374.082.633.251.771.165.134.458.202.875.202.192 0 .412-.037.66-.1.243-.073.42-.127.531-.18zm-.144-11.483a1.901 1.901 0 01-1.343.518 1.93 1.93 0 01-1.352-.518 1.65 1.65 0 01-.562-1.258 1.688 1.688 0 01.562-1.266 1.914 1.914 0 011.35-.522c.524 0 .975.173 1.345.523a1.673 1.673 0 01.56 1.266 1.65 1.65 0 01-.56 1.257z',\n          warning: 'M24.585 21.17L13.774 3.24a1.51 1.51 0 00-2.586 0L.376 21.17a1.51 1.51 0 001.293 2.29h21.623a1.51 1.51 0 001.292-2.29zM12.49 8.714c.621 0 1.146.35 1.146.97 0 1.895-.223 4.618-.223 6.513 0 .494-.541.7-.923.7-.51 0-.94-.208-.94-.701 0-1.894-.223-4.617-.223-6.511 0-.62.51-.971 1.163-.971zm.015 11.734a1.225 1.225 0 01-1.225-1.226c0-.669.525-1.227 1.225-1.227.652 0 1.21.558 1.21 1.227 0 .652-.557 1.225-1.21 1.225z',\n          error: 'M12.469.027c-3.332 0-6.465 1.301-8.824 3.653-4.86 4.86-4.86 12.777 0 17.636a12.392 12.392 0 008.824 3.653c3.336 0 6.465-1.301 8.824-3.653 4.863-4.859 4.863-12.777 0-17.636A12.417 12.417 0 0012.469.027zm5.61 18.086a1.137 1.137 0 01-.802.332c-.285 0-.582-.113-.8-.332l-4.008-4.008-4.008 4.008a1.137 1.137 0 01-.8.332c-.286 0-.583-.113-.802-.332a1.132 1.132 0 010-1.605l4.008-4.004L6.86 8.496a1.132 1.132 0 010-1.605 1.127 1.127 0 011.602 0l4.008 4.007 4.008-4.007a1.127 1.127 0 011.601 0c.45.449.45 1.164 0 1.605l-4.004 4.008 4.004 4.004c.45.449.45 1.164 0 1.605zm0 0'\n        }\n      };\n      // Build singleton from options and sanitize them\n      this._setOptionsDefault(options);\n      this._position = options.position;\n      this._thickBorder = options.thickBorder;\n      this._duration = options.duration;\n      this._transition = options.transition;\n      this._maxActive = options.maxActive;\n      this._setAttributesDefault();\n      // Add position CSS class only after this._position is sure to be a valid value\n      this._dom.classList.add(this._position);\n      this._attach();\n    }\n\n    /** @method\r\n     * @name _setOptionsDefault\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Set singleton options\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Build the notification singleton according to the user options\r\n     * @param {object} options - The singleton options to set */\n  }, {\n    key: \"_setOptionsDefault\",\n    value: function _setOptionsDefault(options) {\n      if (options.position === undefined) {\n        options.position = this._default.handler.position;\n      }\n      if (options.thickBorder === undefined) {\n        options.thickBorder = this._default.handler.thickBorder;\n      }\n      if (options.duration === undefined) {\n        options.duration = this._default.handler.duration;\n      }\n      if (options.transition === undefined) {\n        options.transition = this._default.handler.transition;\n      }\n      if (options.maxActive === undefined) {\n        options.maxActive = this._default.handler.maxActive;\n      }\n    }\n\n    /** @method\r\n     * @name _setAttributesDefault\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Check the notification singleton options validity\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Fallback on default attributes value if the notification singleton options are invalid */\n  }, {\n    key: \"_setAttributesDefault\",\n    value: function _setAttributesDefault() {\n      if (this._position !== 'top-left' && /* Illegal value for position */\n      this._position !== 'top-right' && this._position !== 'bottom-left' && this._position !== 'bottom-right') {\n        this._position = this._default.handler.position; // Default value\n      }\n      if (this._thickBorder !== 'top' && /* Illegal value for thick border */\n      this._thickBorder !== 'bottom' && this._thickBorder !== 'left' && this._thickBorder !== 'right' && this._thickBorder !== 'none') {\n        this._thickBorder = this._default.handler.thickBorder; // Default value\n      }\n      if (typeof this._duration !== 'number' || this._duration <= 0) {\n        // Illegal value for duration\n        this._duration = this._default.handler.duration; // Default value\n      }\n      if (typeof this._transition !== 'number' || this._duration < this._transition * 2 || this._transition <= 0) {\n        // Transition over (duration / 2)\n        this._transition = this._default.handler.transition; // Default value for _maxActive\n      }\n      if (typeof this._maxActive !== 'number' || this._maxActive <= 0) {\n        // Illegal value for maxActive\n        this._maxActive = this._default.handler.maxActive; // Default value for _maxActive\n      }\n    }\n\n    /** @method\r\n     * @name _attach\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since July 2018\r\n     * @description Attach the notification handler to the dom using a fragment */\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var fragment = document.createDocumentFragment();\n      fragment.appendChild(this._dom);\n      document.body.appendChild(fragment);\n    }\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n    /*  -------------------------------------  NOTIFICATION SPECIFIC METHODS  ----------------------------------------  */\n    /*                                                                                                                  */\n    /*  The following methods implements notification features. It handle its events, lifecycle depending on its        */\n    /*  parameters, its DOM structure, and its animations. The Notification singleton will handle the notification      */\n    /*  stacking the in user interface.                                                                                 */\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _events\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Handle mouse events for the given notification\r\n     * @param {{id: number}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {number} notification.requestCount - Notification inner call counter\r\n     * @param {number} notification.timeoutID - Notification own setTimeout ID\r\n     * @param {boolean} notification.sticky - Notification sticky behvaior\r\n     * @param {boolean} notification.closable - Make notification closable flag */\n  }, {\n    key: \"_events\",\n    value: function _events(notification) {\n      var _this2 = this;\n      var closeFired = false; // Close fired flag\n\n      // Inner callback functions\n      var _unDim = function _unDim() {\n        // Undim notification\n        if (notification.isDimmed) {\n          _this2._unDim(notification);\n        }\n      };\n      var _close2 = function _close() {\n        // Close notification\n        if (_this2._active[notification.id] === undefined) {\n          return;\n        }\n\n        // Update counter DOM element\n        if (notification.requestCount > 1) {\n          _this2._decrementRequestCounter(notification, true);\n        }\n\n        // Remove notification element from the DOM tree\n        else if (!closeFired) {\n          closeFired = true;\n          window.clearTimeout(notification.timeoutID); // Clear life cycle timeout\n          notification.dom.close.removeEventListener('click', _close2); // Avoid error when spam clicking the close button\n          _this2._close(notification);\n        }\n      };\n      var _resetTimeout = function _resetTimeout() {\n        // Reset life cycle timeout\n        if (_this2._active[notification.id] === undefined) {\n          return;\n        }\n        if (!closeFired && !notification.isDimmed) {\n          // Only reset timeout if no close event has been fired\n          _this2._resetTimeout(notification);\n        }\n      };\n\n      // Mouse event listeners\n      if (notification.sticky) {\n        notification.dom.addEventListener('mouseenter', _unDim.bind(this));\n        notification.dom.addEventListener('mouseout', _unDim.bind(this));\n      }\n      if (notification.closable) {\n        notification.dom.addEventListener('click', _close2.bind(this));\n        notification.dom.close.addEventListener('click', _close2.bind(this));\n      }\n      notification.dom.addEventListener('mouseover', _resetTimeout.bind(this));\n    }\n\n    /** @method\r\n     * @name _buildUI\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Builds the DOM element that contains and that adapts to all given options\r\n     * @param {object} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {string} notification.type - Error, Warning, Info, Success\r\n     * @param {string} notification.title - Notification title\r\n     * @param {string} notification.message - Notification message\r\n     * @param {boolean} notification.iconless - No icon flag\r\n     * @param {string} notification.thickBorder - Notification border side (override handler side value)\r\n     * @param {boolean} notification.closable - Make notification closable flag\r\n     * @param {boolean} notification.sticky - Make notification sticky flag\r\n     * @param {string} notification.CBtitle - Notification callback title\r\n     * @param {function} notification.callback - Notification callback button\r\n     * @returns {object} Enhanced and ready notification object */\n  }, {\n    key: \"_buildUI\",\n    value: function _buildUI(notification) {\n      var _this3 = this;\n      notification.requestCount = 1;\n      notification.totalRequestCount = 1;\n      this._buildUIDom(notification);\n      this._buildNotificationType(notification);\n      if (notification.iconless) {\n        notification.dom.message.classList.add('iconless-width');\n      }\n      notification.dom.text.appendChild(notification.dom.maintitle);\n      notification.dom.text.appendChild(notification.dom.message);\n      // Add callback button and listener if needed\n      if (notification.callback) {\n        var callbackButton = document.createElement('BUTTON');\n        callbackButton.innerHTML = notification.CBtitle;\n        notification.dom.text.appendChild(callbackButton);\n        callbackButton.addEventListener('click', function () {\n          _this3._close(notification);\n          notification.callback();\n        });\n      }\n      // Fill notification DOM element\n      if (!notification.iconless) {\n        notification.dom.appendChild(notification.dom.icon);\n      }\n      notification.dom.appendChild(notification.dom.text);\n      // Append close button if needed\n      if (notification.closable) {\n        notification.dom.appendChild(notification.dom.close);\n      }\n      // Return final notification\n      return notification;\n    }\n\n    /** @method\r\n     * @name _buildUIDom\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Create the Notification DOM tree\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Build all the Notification internal structure\r\n     * @param {object} notification - The notification to create */\n  }, {\n    key: \"_buildUIDom\",\n    value: function _buildUIDom(notification) {\n      // Create notification DOM elements\n      notification.dom = document.createElement('DIV');\n      notification.dom.icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      notification.dom.iconPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      notification.dom.text = document.createElement('DIV');\n      notification.dom.close = document.createElement('DIV');\n      notification.dom.maintitle = document.createElement('H6');\n      notification.dom.message = document.createElement('P');\n      // Class assignation\n      notification.dom.classList.add('notification');\n      notification.dom.icon.classList.add('vector-container');\n      notification.dom.text.classList.add('text-container');\n      notification.dom.close.classList.add('close');\n      // Changing border side\n      if (notification.thickBorder === 'top') {\n        notification.dom.classList.add('top-border');\n      } else if (notification.thickBorder === 'bottom') {\n        notification.dom.classList.add('bottom-border');\n      } else if (notification.thickBorder === 'left') {\n        notification.dom.classList.add('left-border');\n      } else if (notification.thickBorder === 'right') {\n        notification.dom.classList.add('right-border');\n      }\n      // Text modification\n      notification.dom.maintitle.innerHTML = notification.title || '';\n      notification.dom.message.innerHTML = notification.message || '';\n      notification.dom.close.innerHTML = '&#x2716;';\n      // Image vector\n      notification.dom.icon.setAttribute('viewBox', '0 0 25 25');\n      notification.dom.icon.setAttribute('width', '25');\n      notification.dom.icon.setAttribute('height', '25');\n      notification.dom.icon.appendChild(notification.dom.iconPath);\n    }\n\n    /** @method\r\n     * @name _buildNotificationType\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Attach proper assets and css\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Fills the Notification icon and class according to its inner type\r\n     * @param {object} notification - The notification to fill */\n  }, {\n    key: \"_buildNotificationType\",\n    value: function _buildNotificationType(notification) {\n      // Type specification (title, icon, color)\n      if (['success', 'warning', 'error', 'info'].indexOf(notification.type) !== -1) {\n        notification.dom.classList.add(notification.type);\n        if (!notification.iconless) {\n          notification.dom.iconPath.setAttribute('fill', this._default.color[notification.type]);\n          notification.dom.iconPath.setAttribute('d', this._default.svgPath[notification.type]);\n        }\n      } else {\n        notification.dom.classList.add('info');\n        if (!notification.iconless) {\n          notification.dom.iconPath.setAttribute('fill', this._default.color.info);\n          notification.dom.iconPath.setAttribute('d', this._default.svgPath.info);\n        }\n      }\n    }\n\n    /** @method\r\n     * @name _start\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Call this method to add the new notification to the DOM container, and launch its life cycle\r\n     * @param {object} notification - The notification object\r\n     * @param {number} notification.id - Notification own ID */\n  }, {\n    key: \"_start\",\n    value: function _start(notification) {\n      var _this4 = this;\n      if (Object.keys(this._active).length >= this._maxActive) {\n        this._queue[notification.id] = notification;\n      } else {\n        this._active[notification.id] = notification; // Append the new notification to the _active object\n\n        this._events(notification); // Listen to mouse events on the newly created notification\n        this._open(notification); // Open the new notification\n\n        notification.timeoutID = window.setTimeout(function () {\n          _this4._checkCounter(notification); // Check notification request count to act accordingly\n        }, notification.duration); // Use Notification master duration\n      }\n    }\n\n    /** @method\r\n     * @name _open\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Open and add the notification to the container\r\n     * @param {{id: number}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {object} notification.dom - Notifiction DOM element */\n  }, {\n    key: \"_open\",\n    value: function _open(notification) {\n      // Reverse insertion when notifications are on bottom\n      if (this._position === 'bottom-right' || this._position === 'bottom-left') {\n        notification.renderTo.insertBefore(notification.dom, notification.renderTo.firstChild);\n      } else {\n        notification.renderTo.appendChild(notification.dom);\n      }\n      notification.opened = Date.now();\n      window.setTimeout(function () {\n        notification.dom.style.opacity = 1;\n      }, 10);\n    }\n\n    /** @method\r\n     * @name _close\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Close and remove the notification from the container\r\n     * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {boolean} notification.isClosing - Already closing flag\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {object} notification.renderTo - DOM object to render the notification in */\n  }, {\n    key: \"_close\",\n    value: function _close(notification) {\n      var _this5 = this;\n      if (notification.isClosing) {\n        // Avoid double close on a notification (in case dismiss/dismissAll is triggerred when notification is already closing)\n        return;\n      }\n      notification.isClosing = true; // Lock notification to one fadeOut animation\n      notification.closed = Date.now();\n      notification.effectiveDuration = notification.closed - notification.opened;\n      notification.dom.style.opacity = 0;\n      window.setTimeout(function () {\n        notification.renderTo.removeChild(notification.dom); // Remove this notification from the DOM tree\n        delete _this5._active[notification.id];\n        if (Object.keys(_this5._queue).length > 0) {\n          // Notification queue is not empty\n          _this5._start(_this5._queue[Object.keys(_this5._queue)[0]]); // Start first queued notification\n          delete _this5._queue[Object.keys(_this5._queue)[0]]; // Shift queue object\n        } else if (Object.keys(_this5._active).length === 0) {\n          // Check this._active emptyness\n          _this5._dismissAllLock = false; // Unlock dismissAllLock\n        }\n      }, 1000); // Transition value set in _notification.scss\n    }\n\n    /** @method\r\n     * @name _incrementRequestCounter\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description This method is called when a notification is requested another time\r\n     * @param {object} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {number} notification.requestCount - Notification inner call counter\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {boolean} notification.sticky - Notification sticky behvaior\r\n     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  }, {\n    key: \"_incrementRequestCounter\",\n    value: function _incrementRequestCounter(notification) {\n      ++notification.requestCount; // Increment notification.requestCount\n\n      if (notification.totalRequestCount < notification.requestCount) {\n        notification.totalRequestCount = notification.requestCount;\n      }\n\n      // Update counter DOM element\n      if (notification.requestCount > 1) {\n        var valueToDisplay = '∞';\n        if (notification.requestCount < 100) {\n          valueToDisplay = notification.requestCount;\n        }\n        if (notification.dom.counter) {\n          // Update existing counter\n          notification.dom.counter.innerHTML = valueToDisplay;\n        } else {\n          // Create counter DOM element\n          notification.dom.counter = document.createElement('DIV');\n          notification.dom.counter.classList.add('counter');\n          notification.dom.counter.innerHTML = valueToDisplay;\n          notification.dom.appendChild(notification.dom.counter);\n        }\n      }\n\n      // Undim notification if it is a sticky/dimmed one\n      if (notification.sticky && notification.isDimmed) {\n        this._unDim(notification);\n      }\n    }\n\n    /** @method\r\n     * @name _decrementRequestCounter\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description This method is called each notification cycle end to update its inner counter\r\n     * @param {{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {boolean} notification.sticky - Notification sticky behvaior\r\n     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true)\r\n     * @param {number} notification.requestCount - Notification inner call counter\r\n     * @param {object} notification.dom - Notification DOM element\r\n     * @param {boolean} force - To force the notification.requestCount decrementation */\n  }, {\n    key: \"_decrementRequestCounter\",\n    value: function _decrementRequestCounter(notification, force) {\n      if (notification.sticky && !force) {\n        if (!notification.isDimmed) {\n          this._dim(notification);\n        }\n        return;\n      }\n      this._resetTimeout(notification);\n      --notification.requestCount; // Decrement notification.requestCount\n\n      // Update counter DOM element\n      if (notification.requestCount > 1) {\n        var valueToDisplay = '∞';\n        if (notification.requestCount < 100) {\n          valueToDisplay = notification.requestCount;\n        }\n        notification.dom.counter.innerHTML = valueToDisplay;\n      } else {\n        // Remove counter element from the DOM tree\n        notification.dom.removeChild(notification.dom.counter);\n        delete notification.dom.counter;\n      }\n    }\n\n    /** @method\r\n     * @name _checkCounter\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description This method will reset the fadeout/dim timeout or close/dim the notification depending on its requestCount\r\n     * @param {{id: number}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {number} notification.requestCount - Notification inner call counter\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {number} notification.timeoutID - Notification own setTimeout ID\r\n     * @param {boolean} notification.sticky - Notification sticky behvaior */\n  }, {\n    key: \"_checkCounter\",\n    value: function _checkCounter(notification) {\n      // This notification as still more than one cycle to live\n      if (notification.requestCount > 1) {\n        this._decrementRequestCounter(notification);\n      } else {\n        // This notification reached the end of its life cycle\n        if (notification.renderTo.contains(notification.dom)) {\n          window.clearTimeout(notification.timeoutID);\n          if (notification.sticky) {\n            // FadeOut/Dim depending on sticky behavior\n            this._dim(notification);\n          } else {\n            this._close(notification);\n          }\n        }\n      }\n    }\n\n    /** @method\r\n     * @name _clearRequestCount\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Method that clear every pending request\r\n     * @param {object} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {object} notification.dom - Notifiction DOM element */\n  }, {\n    key: \"_clearRequestCount\",\n    value: function _clearRequestCount(notification) {\n      notification.requestCount = 1;\n      notification.dom.removeChild(notification.dom.counter);\n      delete notification.dom.counter;\n    }\n\n    /** @method\r\n     * @name _resetTimeout\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Use this to reset a notification life cycle, and delay its close event\r\n     * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {number} notification.timeoutID - Notification own setTimeout ID */\n  }, {\n    key: \"_resetTimeout\",\n    value: function _resetTimeout(notification) {\n      var _this6 = this;\n      window.clearTimeout(notification.timeoutID); // Clear previous life cycle\n      notification.timeoutID = window.setTimeout(function () {\n        _this6._checkCounter(notification); // Check notification request count to act accordingly\n      }, notification.duration); // Use Notification master duration\n    }\n\n    /** @method\r\n     * @name _dim\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Only useful for sticky notification that dim instead of close at the end of its life cycle\r\n     * @param {{id: number, requestCount: number, dom: Object, timeoutID: number, sticky: boolean}} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {boolean} notification.sticky - Notification sticky behvaior\r\n     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  }, {\n    key: \"_dim\",\n    value: function _dim(notification) {\n      var that = this;\n      var i = 100;\n      (function halfFadeOut() {\n        // Start animation immediatly\n        if (i >= 0) {\n          notification.dom.style.opacity = i / 100;\n          --i;\n          if (i === 50 && notification.sticky) {\n            // Opacity has reached 0.51\n            notification.dom.style.opacity = 0.5; // Set half transparency on notification\n            notification.isDimmed = true; // Update notification dim status\n            return; // End function\n          }\n        }\n        window.setTimeout(halfFadeOut, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)\n      })();\n    }\n\n    /** @method\r\n     * @name _unDim\r\n     * @private\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Call this method when a notification is not inactive anymore\r\n     * @param {object} notification - The notification object\r\n     * @param {number} notification.id - Notification personnal ID\r\n     * @param {object} notification.dom - Notifiction DOM element\r\n     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */\n  }, {\n    key: \"_unDim\",\n    value: function _unDim(notification) {\n      var that = this;\n      var i = 50;\n      (function halfFadeIn() {\n        if (i < 100) {\n          notification.dom.style.opacity = i / 100;\n          ++i;\n        } else if (i === 100) {\n          notification.dom.style.opacity = 1; // Set full visibility on notification\n          notification.isDimmed = false; // Update notification dim status\n          that._resetTimeout(notification); // Reset life cycle timeout\n          return; // End function\n        }\n        window.setTimeout(halfFadeIn, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)\n      })();\n    }\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n    /*  -----------------------------  SINGLE NOTIFICATION CONSTRUCTION UTILS METHODS  -------------------------------  */\n    /*                                                                                                                  */\n    /*  The following methods only concerns a new notification request. It will test the options validity, default to   */\n    /*  fallback value if necessary and give the notification a pseudo unique identifier.                               */\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _checkNotificationOptionsValidity\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Check the Notification options validity\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Check a Notification options object against the required parameters.\r\n     * @param {object} options - The notification options to check validity */\n  }, {\n    key: \"_checkNotificationOptionsValidity\",\n    value: function _checkNotificationOptionsValidity(options) {\n      // Check for mandatory arguments existence\n      if (options === undefined || options.type === undefined || options.message === undefined) {\n        return false;\n      }\n      // Check existing message\n      if (typeof options.message !== 'string' || options.message.length === 0) {\n        return false;\n      }\n      // Check for unclosable at all notification\n      if (options.sticky && options.closable === false) {\n        return false;\n      }\n      // Test Notification inner variables validity\n      if (options.type !== 'info' && options.type !== 'success' && options.type !== 'warning' && options.type !== 'error') {\n        options.type = this._default.notification.type;\n      }\n      // Unlock dismissAllLock\n      if (this._dismissAllLock) {\n        this._dismissAllLock = false;\n      }\n      return true;\n    }\n\n    /** @method\r\n     * @name _setOptionsFallback\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Set Notification fallback options\r\n     * @author Arthur Beaulieu\r\n     * @since March 2019\r\n     * @description Check a Notification options object and fill it with default value in case they are empty.\r\n     * @param {object} options - The notification options to fill with default value if empty */\n  }, {\n    key: \"_setOptionsFallback\",\n    value: function _setOptionsFallback(options) {\n      if (options.title === undefined) {\n        options.title = this._default.notification.title;\n      }\n      if (options.duration === undefined) {\n        options.duration = this._duration;\n      }\n      if (options.iconless === undefined) {\n        options.iconless = this._default.notification.iconless;\n      }\n      if (options.thickBorder === undefined) {\n        options.thickBorder = this._thickBorder;\n      }\n      if (options.closable === undefined) {\n        options.closable = this._default.notification.closable;\n      }\n      if (options.sticky === undefined) {\n        options.sticky = this._default.notification.sticky;\n      }\n      if (options.renderTo === undefined) {\n        options.renderTo = this._default.notification.renderTo;\n      }\n      if (options.CBtitle === undefined) {\n        options.CBtitle = this._default.notification.CBtitle;\n      }\n      if (options.callback === undefined) {\n        options.callback = this._default.notification.callback;\n      }\n      if (options.isDimmed === undefined) {\n        options.isDimmed = this._default.notification.isDimmed;\n      }\n    }\n\n    /** @method\r\n     * @name _idGenerator\r\n     * @private\r\n     * @memberof Notification\r\n     * @summary Generate an ID\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Hash the seed to generate an ID\r\n     * @param {string} seed   - The seed string to hash\r\n     * @param {number} length - The length of the returned ID */\n  }, {\n    key: \"_idGenerator\",\n    value: function _idGenerator(seed, length) {\n      /* Original code from:\r\n       * http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\r\n       * Tweaked to fit Notification class needs\r\n       */\n      var hash = 0;\n      var character = '';\n      if (seed.length === 0 || length > 12) {\n        return undefined;\n      }\n      for (var i = 0; i < seed.length; ++i) {\n        character = seed.charCodeAt(i);\n        hash = (hash << 5) - hash + character;\n        hash |= 0; // Convert to 32bit integer\n      }\n      return (Math.abs(hash).toString(36) + '' + Math.abs(hash / 2).toString(36).split('').reverse().join('')).substring(0, length).toUpperCase(); // Here is the twekead line\n    }\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n    /*  --------------------------------------  NOTIFICATION PUBLIC METHODS  -----------------------------------------  */\n    /*                                                                                                                  */\n    /*  The following methods are the exposed API of the Notification component. It allow to raise standard or custom   */\n    /*  notification without bothering their lifecycle, position or other JavaScript expensive implementation.          */\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name new\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Build a notification according to the given options, then append it to notification container.\r\n     * @param {object} options - The notification options object\r\n     * @param {string} options.type - <i>Error; Warning; Info; Success;</i>\r\n     * @param {string} [options.title=options.type] - Notification title\r\n     * @param {string} options.message - Notification message\r\n     * @param {number} [options.duration=handler] - Notification duration (override handler duration value)\r\n     * @param {boolean} [options.iconless=false] - No icon flag\r\n     * @param {string} [options.thickBorder=handler] - Notification border side (override handler side value)\r\n     * @param {boolean} [options.closable=true] - Make notification closable flag\r\n     * @param {boolean} [options.sticky=false] - Make notification sticky flag\r\n     * @param {object} [options.renderTo=handler] - Dom object to render the notification in\r\n     * @param {string} [options.CBtitle=Callback] - Notification callback title\r\n     * @param {function} [options.callback=undefined] - Notification callback button\r\n     * @returns {number} The newly created notification ID */\n  }, {\n    key: \"new\",\n    value: function _new(options) {\n      if (this._checkNotificationOptionsValidity(options) === false) {\n        console.error('Notification.js : new() options argument object is invalid.');\n        return -1;\n      }\n      this._setOptionsFallback(options);\n      // Build notification DOM element according to the given options\n      var notification = this._buildUI({\n        id: this._idGenerator(\"\".concat(options.type).concat(options.message), 5),\n        // Generating an ID of 5 characters long from notification mandatory fields\n        type: options.type,\n        message: options.message,\n        title: options.title,\n        duration: options.duration,\n        iconless: options.iconless,\n        thickBorder: options.thickBorder,\n        closable: options.closable,\n        sticky: options.sticky,\n        renderTo: options.renderTo,\n        CBtitle: options.CBtitle,\n        callback: options.callback,\n        isDimmed: options.isDimmed // Only useful if sticky is set to true\n      });\n      // Create a new notification in the container: No notification with the same ID is already open\n      if (!this._active[notification.id]) {\n        this._start(notification);\n      } else {\n        // Use existing notification: increment request count and reset timeout\n        this._resetTimeout(this._active[notification.id]);\n        this._incrementRequestCounter(this._active[notification.id]);\n        notification = this._active[notification.id]; // Clear local new notification since it already exists in this._active\n      }\n      return notification.id;\n    }\n\n    /** @method\r\n     * @name info\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Build an info notification\r\n     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\r\n     * @returns {number} The newly created notification ID */\n  }, {\n    key: \"info\",\n    value: function info(options) {\n      if (options) {\n        options.type = 'info';\n        return this[\"new\"](options);\n      } else {\n        console.error('Notification.js : No arguments provided for info() method.');\n      }\n    }\n\n    /** @method\r\n     * @name success\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Build a success notification\r\n     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\r\n     * @returns {number} The newly created notification ID */\n  }, {\n    key: \"success\",\n    value: function success(options) {\n      if (options) {\n        options.type = 'success';\n        return this[\"new\"](options);\n      } else {\n        console.error('Notification.js : No arguments provided for success() method.');\n      }\n    }\n\n    /** @method\r\n     * @name warning\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Build a warning notification\r\n     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\r\n     * @returns {number} The newly created notification ID */\n  }, {\n    key: \"warning\",\n    value: function warning(options) {\n      if (options) {\n        options.type = 'warning';\n        return this[\"new\"](options);\n      } else {\n        console.error('Notification.js : No arguments provided for warning() method.');\n      }\n    }\n\n    /** @method\r\n     * @name error\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Build an error notification\r\n     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())\r\n     * @returns {number} The newly created notification ID */\n  }, {\n    key: \"error\",\n    value: function error(options) {\n      if (options) {\n        options.type = 'error';\n        return this[\"new\"](options);\n      } else {\n        console.error('Notification.js : No arguments provided for error() method.');\n      }\n    }\n\n    /** @method\r\n     * @name dismiss\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Dismiss a specific notification via its ID\r\n     * @param {string} id - The notification ID to dismiss */\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(id) {\n      window.clearTimeout(this._active[id].timeoutID); // Clear notification timeout\n\n      if (this._active[id].requestCount > 1) {\n        // Several request are pending\n        this._clearRequestCount(this._active[id]); // Clear all pending request\n      }\n      this._close(this._active[id]); // Close notification\n    }\n\n    /** @method\r\n     * @name dismissAll\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Clear the notification handler from all its active notifications */\n  }, {\n    key: \"dismissAll\",\n    value: function dismissAll() {\n      if (!this._dismissAllLock && Object.keys(this._active).length !== 0) {\n        // Check that _dimissAllLock is disable and that there is still notification displayed\n        this._dismissAllLock = true; // dismissAllLock will be unlocked at the last _close() method call\n        this._queue = {}; // Clear queue object\n\n        for (var id in this._active) {\n          // Iterate over notifications\n          this.dismiss(id);\n        }\n      }\n    }\n\n    /** @method\r\n     * @name dismissType\r\n     * @public\r\n     * @memberof Notification\r\n     * @author Arthur Beaulieu\r\n     * @since June 2018\r\n     * @description Dismiss all notifications from a given type\r\n     * @param {string} type - <i>succes; info; warning; error;</i> */\n  }, {\n    key: \"dismissType\",\n    value: function dismissType(type) {\n      if (Object.keys(this._active).length !== 0) {\n        // Check that _dismissAllLock is disable and that there is still notification displayed\n        for (var id in this._active) {\n          // Iterate over notifications\n          if (this._active[id].type === type) {\n            this.dismiss(id);\n          }\n        }\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Notification);\n\n//# sourceURL=webpack://LPSA/./src/js/utils/Notification.js?");

/***/ }),

/***/ "./src/scss/LPSA.scss":
/*!****************************!*\
  !*** ./src/scss/LPSA.scss ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://LPSA/./src/scss/LPSA.scss?");

/***/ }),

/***/ "./src/scss/utils/notification.scss":
/*!******************************************!*\
  !*** ./src/scss/utils/notification.scss ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://LPSA/./src/scss/utils/notification.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/LPSA.js");
/******/ 	window.LPSA = __webpack_exports__["default"];
/******/ 	
/******/ })()
;