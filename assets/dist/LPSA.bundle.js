/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/LPSA.js":
/*!************************!*\
  !*** ./src/js/LPSA.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _scss_LPSA_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/LPSA.scss */ \"./src/scss/LPSA.scss\");\n/* harmony import */ var _utils_DnD__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/DnD */ \"./src/js/utils/DnD.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\nvar LPSA = /*#__PURE__*/function () {\n  /** @summary <h1>The global LPSA application class, which handles both UI, modelisation and computing.</h1>\n   * @author Arthur Beaulieu\n   * @since September 2024\n   * @description <blockquote>\n   * Providing the whole UI structure and events, so user can interact and performs the following :\n   * <ul>\n   *   <li>manage session database (load database, add entry, edit entry, delete entry, export databse, clear database) ;</li>\n   *   <li>provide input values to compare against the loaded database (additionnal controls over results amounts, precision threshold and tolerance threshold) ;</li>\n   *   <li>matching results displayed in order with confidence index.</li>\n   * </ul>\n   * For confidentiality purpose, no other spec will be defined.\n   * </blockquote> */\n  function LPSA() {\n    var _this = this;\n    _classCallCheck(this, LPSA);\n    /** @private\n     * @member {string} - The LPSA application version */\n    this._version = '0.0.7';\n\n    // ----- Studied values\n    /** @private\n     * @member {array[array[number]]} - The sutied user input to compare against loaded database */\n    this._input = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\n    // ----- Results modificators\n    /** @private\n     * @member {number} - The threshold to compare values in different tens */\n    this._tensThreshold = 0; // Tens tolerance threshold\n    /** @private\n     * @member {number} - The amount of wanted results when comparing inputs to the loaded database */\n    this._resultsAmount = 1; // Amount of required results\n    /** @private\n     * @member {number} - The minimal esults confidence required to display results */\n    this._precision = 75; // Results' minimal precision\n\n    // ----- Class internals\n    /** @private\n     * @member {object} - The aside's scrollbar */\n    this._asideScroll = null; // Scrollbar inside aside\n    /** @private\n     * @member {object} - The drag and drop controller to handle JSON dropping */\n    this._dndController = null; // Handle db drag'n'drop into UI\n    /** @private\n     * @member {object} - The loaded database */\n    this._db = null; // Session database\n\n    // ----- App performances\n    /** @private\n     * @member {object} - Holds the performance timing measures */\n    this._perf = {\n      db: {\n        m1: null,\n        m2: null\n      },\n      analysis: {\n        m1: null,\n        m2: null\n      }\n    };\n\n    // ----- Begin website initialization\n    this._initApp().then(this._events.bind(this)).then(this._finalizeInit.bind(this))[\"catch\"](function (err) {\n      window.notification.error({\n        message: \"Erreur fatale \\xE0 l'initialisation de l'application. Contactez le support\"\n      });\n      document.getElementById('feedback-label').innerHTML = \"Une ereur fatale est survenue \\xE0 l'initialisation de l'application, aucune fonctionnalit\\xE9 n'est accessible. Contactez le support.\";\n      console.error(\"LPSA v\".concat(_this._version, \" : Fatal error during initialization, please contact support with following error :\\n\"), err);\n    });\n  }\n\n  // ---- App initialization sequence\n\n  /** @method\n   * @name _initApp\n   * @static\n   * @memberof LPSA\n   * @description <blockquote>\n   * Initializes the drag and drop controller over the <main> DOM element, and tries to load a database stored in the local storage.\n   * If any databse is stored, it will be loaded in session and the aside will be filled with its data.\n   * </blockquote>\n   * @returns {Promise} Promise that is resolved if DnD controller is properly initialized, rejected otherwise */\n  return _createClass(LPSA, [{\n    key: \"_initApp\",\n    value: function _initApp() {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        try {\n          _this2._dndController = new _utils_DnD__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            target: '.dnd-container',\n            onDropFile: function onDropFile(fileInfo, data) {\n              if (fileInfo.type === 'application/json') {\n                // If dropped file is a .JSON file, proceed to fill database\n                _this2._fillDatabase(_utils_DnD__WEBPACK_IMPORTED_MODULE_1__[\"default\"].formatAsJSON(data.target.result));\n              } else {\n                // Notify user that dropped file isn't expected\n                window.notification.error({\n                  message: \"Format de fichier non pris en charge pour l'import de la base de donn\\xE9e\"\n                });\n                document.getElementById('feedback-label').innerHTML = \"Le fichier d\\xE9pos\\xE9 n'est pas au format support\\xE9 (.JSON).\";\n              }\n            }\n          });\n          // Try to load DB from local storage if any\n          var db = window.localStorage.getItem('session-db');\n          if (db !== null) {\n            _this2._fillDatabase(JSON.parse(db));\n          }\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    /** @method\n     * @name _events\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Allow every user interaction by listening to DOM events on specific UI elements.\n     * </blockquote>\n     * @returns {Promise} Promise that is resolved if all events are listened, rejected otherwise */\n  }, {\n    key: \"_events\",\n    value: function _events() {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        try {\n          // Number inputs\n          document.querySelector('#t1-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/1'));\n          document.querySelector('#t1-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/2'));\n          document.querySelector('#t1-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '1/3'));\n          document.querySelector('#t2-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/1'));\n          document.querySelector('#t2-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/2'));\n          document.querySelector('#t2-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '2/3'));\n          document.querySelector('#t3-1').addEventListener('input', _this3._updateInputNumber.bind(_this3, '3/1'));\n          document.querySelector('#t3-2').addEventListener('input', _this3._updateInputNumber.bind(_this3, '3/2'));\n          document.querySelector('#t3-3').addEventListener('input', _this3._updateInputNumber.bind(_this3, '3/3'));\n          // Aside inputs\n          document.querySelector('#aside-toggle').addEventListener('click', _this3._toggleAside.bind(_this3));\n          document.querySelector('#db-add').addEventListener('click', _this3._addDatabaseElement.bind(_this3));\n          document.querySelector('#db-save').addEventListener('click', _this3._exportDatabase.bind(_this3));\n          document.querySelector('#db-erase').addEventListener('click', _this3._clearDatabaseModal.bind(_this3));\n          // Result modificators\n          document.querySelector('#threshold-range').addEventListener('input', _this3._updateThresholdRange.bind(_this3));\n          document.querySelector('#results-range').addEventListener('input', _this3._updateResultsRange.bind(_this3));\n          document.querySelector('#precision-range').addEventListener('input', _this3._updatePrecisionRange.bind(_this3));\n          // Submission\n          document.querySelector('#clear-input').addEventListener('click', _this3._clearInputs.bind(_this3));\n          document.querySelector('#submit-input').addEventListener('click', _this3._submitInputs.bind(_this3));\n          // Blur modal event\n          document.querySelector('#info-button').addEventListener('click', _this3._infoModal.bind(_this3));\n          document.querySelector('#modal-overlay').addEventListener('click', _this3._closeModal.bind(_this3));\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    /** @method\n     * @name _finalizeInit\n     * @static\n     * @memberof LPSA\n     * @description <blockquote>\n     * Removes the loading overlay so that the app become visible and usable.\n     * </blockquote>\n     * @returns {Promise} Promise that is resolved when view is ready, rejected otherwise */\n  }, {\n    key: \"_finalizeInit\",\n    value: function _finalizeInit() {\n      return new Promise(function (resolve, reject) {\n        try {\n          document.querySelector('#loading-overlay').style.opacity = 0;\n          setTimeout(function () {\n            document.querySelector('#loading-overlay').style.display = 'none';\n            resolve();\n          }, 500); // Match animation duration in scss file\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    // ----- Input event callbacks\n  }, {\n    key: \"_updateInputNumber\",\n    value: function _updateInputNumber(inputString, e) {\n      // First ensure input value is properly splitted\n      var whichInput = inputString.split('/');\n      if (whichInput.length !== 2) {\n        e.returnValue = false;\n        return;\n      }\n      // Ensure provided input is only numerical\n      var numericalRegex = /[0-9]|\\./;\n      if (!numericalRegex.test(e.target.value)) {\n        e.target.classList.add('error');\n        setTimeout(function () {\n          return e.target.classList.remove('error');\n        }, 1500);\n        e.target.value = null;\n        this._input[whichInput[0] - 1][whichInput[1] - 1] = 0; // reset input value\n        return;\n      }\n      e.target.classList.add('success');\n      setTimeout(function () {\n        return e.target.classList.remove('success');\n      }, 1500);\n      this._input[whichInput[0] - 1][whichInput[1] - 1] = parseInt(e.target.value);\n    }\n  }, {\n    key: \"_updateThresholdRange\",\n    value: function _updateThresholdRange(e) {\n      var value = e.target.value;\n      this._tensThreshold = parseInt(value); // Save value as integer\n      document.querySelector('#threshold-range-label').innerHTML = \"Tol\\xE9rance \".concat(value);\n    }\n  }, {\n    key: \"_updateResultsRange\",\n    value: function _updateResultsRange(e) {\n      var value = e.target.value;\n      this._resultsAmount = parseInt(value); // Save value as integer\n      document.querySelector('#results-range-label').innerHTML = \"Nombre de resultats \".concat(value);\n    }\n  }, {\n    key: \"_updatePrecisionRange\",\n    value: function _updatePrecisionRange(e) {\n      var value = e.target.value;\n      this._precision = parseInt(value); // Save value as integer\n      document.querySelector('#precision-range-label').innerHTML = \"Pr\\xE9cision minimale : \".concat(value, \"%\");\n    }\n  }, {\n    key: \"_clearInputs\",\n    value: function _clearInputs(e) {\n      // Clear inputs\n      document.querySelector('#t1-1').value = null;\n      document.querySelector('#t1-2').value = null;\n      document.querySelector('#t1-3').value = null;\n      document.querySelector('#t2-1').value = null;\n      document.querySelector('#t2-2').value = null;\n      document.querySelector('#t2-3').value = null;\n      document.querySelector('#t3-1').value = null;\n      document.querySelector('#t3-2').value = null;\n      document.querySelector('#t3-3').value = null;\n      // Clear internal data\n      this._input = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n      // Blur button\n      e.target.blur();\n      window.notification.info({\n        message: \"Les champs en entr\\xE9e ont \\xE9t\\xE9 nettoy\\xE9s\"\n      });\n    }\n  }, {\n    key: \"_submitInputs\",\n    value: function _submitInputs(e) {\n      // Ensure a db has been dropped first\n      if (this._db === null) {\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e n'est charg\\xE9e en m\\xE9moire\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Veuillez d'abord glisser-d\\xE9poser n'importe ou sur la page le JSON de donn\\xE9es.\";\n        e.target.blur();\n        return;\n      }\n      // Then ensure that there are more than 4 inputs filled\n      var isFilled = 0;\n      for (var i = 0; i < this._input.length; ++i) {\n        for (var j = 0; j < this._input[i].length; ++j) {\n          if (this._input[i][j] > 0) {\n            ++isFilled;\n          }\n        }\n      }\n      // Not enough filled data\n      if (isFilled < 4) {\n        window.notification.warning({\n          message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Cette serie comporte moins de 4/9 valeurs et n'est pas pertinente \\xE0 analyser.\";\n        e.target.blur();\n        return;\n      }\n      // Start analysis\n      this._seriesAnalysis(isFilled);\n    }\n  }, {\n    key: \"_seriesAnalysis\",\n    value: function _seriesAnalysis(length) {\n      var _this4 = this;\n      document.getElementById('feedback-label').innerHTML = \"D\\xE9marrage de l'analyse, serie \\xE9valu\\xE9e \".concat(length, \"/9...\");\n      this._perf.analysis.m1 = performance.now();\n      // Select matching input from given length\n      var targetData = null;\n      for (var i = 0; i < this._db.data.length; ++i) {\n        if (this._db.data[i].seriesLength === length) {\n          targetData = this._db.data[i];\n          break;\n        }\n      }\n      // No matching length in db\n      if (targetData === null) {\n        window.notification.error({\n          message: \"Aucune donn\\xE9e \".concat(length, \"/9 \\xE0 comparer\")\n        });\n        document.getElementById('feedback-label').innerHTML = \"Aucune donn\\xE9e en base pour des s\\xE9ries evalu\\xE9s \".concat(length, \"/9.\");\n        return;\n      }\n      // Internal method to iterates db and compare against input\n      var computeCandidates = function computeCandidates(targetArray) {\n        var outputCandidates = []; // In this aray, we store the distance value with input. The lower the best\n        for (var _i = 0; _i < targetArray.length; ++_i) {\n          // Perform iteration on the 3 triplets\n          var distance = 0;\n          var usableCandidate = true; // Is the studied candidate worth adding to results\n          for (var j = 0; j < 3; ++j) {\n            for (var k = 0; k < 3; ++k) {\n              // We aim to compute a distance between target input and studied series.\n              // The distance is a substraction (in abs value) of those value\n              // If values are from a different tens, we ignore the comparison*\n              //* Depending on the tolerance threshold, we can compare number of different tens according to thresh value\n              var studiedTens = parseInt(\"\".concat(targetArray[_i].values[j][k] / 10)[0]);\n              var inputTens = parseInt(\"\".concat(_this4._input[j][k] / 10)[0]);\n              // Don't compare valid input with db value at 0\n              if (_this4._input[j][k] !== 0 && targetArray[_i].values[j][k] === 0) {\n                // Candidate is not relevant as a result -> do not compare input value facing a 0\n                usableCandidate = false;\n              } else {\n                if (studiedTens === inputTens) {\n                  // First use case, tens are the same, compute distance\n                  distance += Math.abs(targetArray[_i].values[j][k] - _this4._input[j][k]);\n                } else if (Math.abs(targetArray[_i].values[j][k] - _this4._input[j][k]) <= _this4._tensThreshold) {\n                  // Otherwise, the absolute substraction is under or equal to tolerance threshold\n                  distance += Math.abs(targetArray[_i].values[j][k] - _this4._input[j][k]);\n                } else {\n                  // Candidate is not relevant as a result (not same tens and beyond tolerance)\n                  usableCandidate = false;\n                }\n              }\n            }\n          }\n          // Push result to array only if valid, and over required precision\n          if (usableCandidate === true && distance < 100 && 100 - distance >= _this4._precision) {\n            outputCandidates.push({\n              distance: distance,\n              series: targetArray[_i]\n            });\n          }\n        }\n        return outputCandidates;\n      };\n      // Perform analysis\n      var goForCandidates = computeCandidates(targetData.goFor);\n      var goAgainstCandidates = computeCandidates(targetData.goAgainst);\n      // Perform sorting on result values by distance\n      goForCandidates = goForCandidates.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      goAgainstCandidates = goAgainstCandidates.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      this._resultsModal(goForCandidates, goAgainstCandidates);\n      // Search completed\n      this._perf.analysis.m2 = performance.now();\n      window.notification.success({\n        message: \"Analyse des donn\\xE9es termin\\xE9e\"\n      });\n      document.getElementById('feedback-label').innerHTML = \"Analyse de la serie termin\\xE9e :  \".concat(goForCandidates.length + goAgainstCandidates.length, \" r\\xE9sultat(s).\");\n    }\n\n    // ----- Local database handler (all allowed data manipulation)\n\n    // Load a given JSON database into aside and into session memory\n  }, {\n    key: \"_fillDatabase\",\n    value: function _fillDatabase(json) {\n      var _this5 = this;\n      // Ensure the JSON data contains what we expect\n      if (!json.date || !json.data) {\n        window.notification.error({\n          message: \"Le contenu de la base de donn\\xE9e est mal format\\xE9\"\n        });\n        document.getElementById('feedback-label').innerHTML = \"Le fichier d\\xE9pos\\xE9 ne contiens pas les donn\\xE9es attentudes.\";\n        return;\n      }\n      // Measure db filling performances (starting point)\n      this._perf.db.m1 = performance.now();\n      // Clear any previous content\n      window.localStorage.removeItem('session-db');\n      document.getElementById('db-info').innerHTML = '';\n      document.getElementById('aside-content').innerHTML = '';\n      // Start the filling of the aside with current database information\n      var date = new Intl.DateTimeFormat('fr', {\n        // Format database date to FR locale\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }).format(new Date(json.date));\n      document.getElementById('feedback-label').innerHTML = \"Import de la base de donn\\xE9e du \".concat(date, \"...\");\n      document.getElementById('db-info').appendChild(this.__buildDatabaseInformation(json, date));\n      // Iterate database to fill series\n      for (var i = 0; i < json.data.length; ++i) {\n        var goFor = this.__buildDatabaseSeries(json.data[i], 'goFor', i);\n        document.getElementById('aside-content').appendChild(goFor);\n        var goAgainst = this.__buildDatabaseSeries(json.data[i], 'goAgainst', i);\n        document.getElementById('aside-content').appendChild(goAgainst);\n      }\n      // Save db locally and in storage\n      this._db = json;\n      window.localStorage.setItem('session-db', JSON.stringify(this._db));\n      // Create scrollbar for aside's content\n      this._asideScroll = new window.ScrollBar({\n        target: document.getElementById('aside-content'),\n        minSize: 200,\n        style: {\n          color: '#758C78'\n        }\n      });\n      // Ensure aside's content is rendered with RAF before asking for an update\n      requestAnimationFrame(this._asideScroll.updateScrollbar.bind(this._asideScroll));\n      // Measure db filling performances (ending point)\n      this._perf.db.m2 = performance.now();\n      // Notify user in UI that everything is set\n      window.notification.success({\n        message: \"Base de donn\\xE9e du \".concat(date, \" charg\\xE9e\"),\n        CBtitle: 'Voir les données',\n        callback: function callback() {\n          return _this5._toggleAside();\n        }\n      });\n      document.getElementById('feedback-label').innerHTML = \"Base de donn\\xE9e du \".concat(date, \" charg\\xE9e en \").concat(((this._perf.db.m2 - this._perf.db.m1) / 1000).toFixed(3), \" seconde(s).\");\n    }\n  }, {\n    key: \"__buildDatabaseInformation\",\n    value: function __buildDatabaseInformation(db, formattedDate) {\n      var nbElem = 0;\n      for (var i = 0; i < db.data.length; ++i) {\n        nbElem += db.data[i].goFor.length;\n        nbElem += db.data[i].goAgainst.length;\n      }\n      var container = document.createElement('P');\n      container.innerHTML = \"\\n      \".concat(formattedDate, \" (version \").concat(db.version, \")<br>\\n      \").concat(nbElem, \" entr\\xE9e(s) en base\\n    \");\n      return container;\n    }\n  }, {\n    key: \"__buildDatabaseSeries\",\n    value: function __buildDatabaseSeries(data, type, i) {\n      var _this6 = this;\n      // Create series title\n      var series = document.createElement('DIV');\n      series.classList.add('series');\n      series.innerHTML = \"\\n      <h2>S\\xE9rie \".concat(data.seriesLength, \"/9, parier <span class=\\\"go-\").concat(type.substring(2).toLowerCase(), \"\\\">\").concat(type === 'goFor' ? 'Pour' : 'Contre', \"</span><br><i>\").concat(data[type].length, \" entr\\xE9e(s)</i></h2>\\n    \");\n      // Create expander/collapser for studied series\n      var expandCollapse = document.createElement('DIV');\n      expandCollapse.innerHTML = '➖'; //➕\n      series.firstElementChild.appendChild(expandCollapse);\n      // Create container and iterate series entries to fill container with\n      var seriesContainer = document.createElement('DIV');\n      // Only iterate entries if any, display no results otherwise\n      if (data[type].length) {\n        var _loop = function _loop(j) {\n          // Build databse element\n          var element = _this6.__buildDatabaseElement(data[type][j]);\n          // Edit element\n          var editButton = document.createElement('BUTTON');\n          editButton.addEventListener('click', function () {\n            _this6._editElementModal(i, j, type);\n          });\n          editButton.innerHTML = '✏️';\n          element.appendChild(editButton);\n          // Delete element\n          var deleteButton = document.createElement('BUTTON');\n          deleteButton.addEventListener('click', function () {\n            _this6._removeDatabaseElement(i, j, type);\n          });\n          deleteButton.innerHTML = '🗑️';\n          element.appendChild(deleteButton);\n          // Append element to series container\n          seriesContainer.appendChild(element);\n        };\n        for (var j = 0; j < data[type].length; ++j) {\n          _loop(j);\n        }\n      } else {\n        // No results in series\n        var element = document.createElement('P');\n        element.innerHTML = 'Aucune entrée pour cette catégorie';\n        seriesContainer.appendChild(element);\n      }\n      // Expand/collapse event\n      expandCollapse.addEventListener('click', function () {\n        if (expandCollapse.innerHTML === '➖') {\n          expandCollapse.innerHTML = '➕';\n          seriesContainer.style.display = 'none';\n        } else {\n          expandCollapse.innerHTML = '➖';\n          seriesContainer.style.display = 'inherit';\n        }\n        // Update scroll to ensure its re-computed with new height\n        requestAnimationFrame(_this6._asideScroll.updateScrollbar.bind(_this6._asideScroll));\n      });\n      // Final DOM chaining before returning element\n      series.appendChild(seriesContainer);\n      return series;\n    }\n  }, {\n    key: \"__buildDatabaseElement\",\n    value: function __buildDatabaseElement(data) {\n      var element = document.createElement('P');\n      var v = data.values;\n      element.innerHTML = \"\\n      <span class=\\\"value\\\">\".concat(v[0][0], \", \").concat(v[0][1], \", \").concat(v[0][2], \" / \").concat(v[1][0], \", \").concat(v[1][1], \", \").concat(v[1][2], \" / \").concat(v[2][0], \", \").concat(v[2][1], \", \").concat(v[2][2], \"</span>\\n    \");\n      // Additionnal content\n      if (data.additionnal.length > 0) {\n        var a = data.additionnal;\n        element.innerHTML += \"\\n        <span class=\\\"additionnal\\\">\".concat(a[0][0], \"-\").concat(a[0][1], \"-\").concat(a[0][2], \" / \").concat(a[1][0], \"-\").concat(a[1][1], \"-\").concat(a[1][2], \" / \").concat(a[2][0], \"-\").concat(a[2][1], \"-\").concat(a[2][2], \"</span>\\n      \");\n      } else {\n        element.innerHTML += \"\\n        <span class=\\\"additionnal\\\">-</span>\\n      \";\n      }\n      // Comment section\n      if (data.comment !== '') {\n        element.innerHTML += \"\\n        <span class=\\\"comment\\\">\".concat(data.comment, \"</span>\\n      \");\n      } else {\n        element.innerHTML += \"\\n        <span class=\\\"comment\\\">-</span>\\n      \";\n      }\n      return element;\n    }\n  }, {\n    key: \"_addDatabaseElement\",\n    value: function _addDatabaseElement() {\n      if (this._db === null) {\n        this._db = {\n          version: '1',\n          date: \"\".concat(new Date().toISOString().split('T')[0]),\n          data: JSON.parse('[{\"seriesLength\":4,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":5,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":6,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":7,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":8,\"goFor\":[],\"goAgainst\":[]},{\"seriesLength\":9,\"goFor\":[],\"goAgainst\":[]}]')\n        };\n      }\n      this._addElementModal();\n    }\n  }, {\n    key: \"_editDatabaseElement\",\n    value: function _editDatabaseElement(seriesNumber, elementNumber, type, element) {\n      this._db.data[seriesNumber][type][elementNumber] = element;\n      this._fillDatabase(this._db);\n    }\n  }, {\n    key: \"_removeDatabaseElement\",\n    value: function _removeDatabaseElement(seriesNumber, elementNumber, type) {\n      this._db.data[seriesNumber][type].splice(elementNumber, 1);\n      this._fillDatabase(this._db);\n    }\n  }, {\n    key: \"_exportDatabase\",\n    value: function _exportDatabase() {\n      if (this._db !== null) {\n        var link = document.createElement('A');\n        var data = this._db;\n        data.version = \"\".concat(parseInt(this._db.version) + 1);\n        data.date = new Date().toISOString().split('T')[0];\n        var file = new Blob([JSON.stringify(data)], {\n          type: 'text/plain'\n        });\n        link.href = URL.createObjectURL(file);\n        link.download = \"lpsa-dataset-\".concat(data.date, \".json\");\n        link.click();\n      } else {\n        document.getElementById('feedback-label').innerHTML = \"Aucune base de donn\\xE9e \\xE0 exporter.\";\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e \\xE0 exporter\"\n        });\n      }\n    }\n  }, {\n    key: \"_clearDatabase\",\n    value: function _clearDatabase() {\n      if (this._db) {\n        var date = this._db.date;\n        document.getElementById('feedback-label').innerHTML = \"Suppression de la base de donn\\xE9e du \".concat(date, \"...\");\n        document.getElementById('db-info').innerHTML = \"<p>Aucune information disponible, veuillez charger une base de donn\\xE9e.</p>\";\n        document.getElementById('aside-content').innerHTML = '<i>Aucune donnée chargée en session. Veuillez glisser/déposer un fichier (.JSON) de base de donnée nimporte où sur cette page.</i>'; // Clear previous content\n        window.localStorage.removeItem('session-db');\n        this._db = null;\n        document.getElementById('feedback-label').innerHTML = \"Base de donn\\xE9e supprim\\xE9e.\";\n        window.notification.success({\n          message: \"Base de donn\\xE9e du \".concat(date, \" supprim\\xE9e\")\n        });\n      } else {\n        document.getElementById('feedback-label').innerHTML = \"Aucune base de donn\\xE9e \\xE0 supprimer.\";\n        window.notification.warning({\n          message: \"Aucune base de donn\\xE9e \\xE0 supprimer\"\n        });\n      }\n    }\n\n    // Aside viewer\n  }, {\n    key: \"_toggleAside\",\n    value: function _toggleAside() {\n      if (document.getElementById('bd-viewer').classList.contains('opened')) {\n        document.getElementById('aside-toggle').innerHTML = '&rsaquo;';\n        document.getElementById('bd-viewer').classList.remove('opened');\n      } else {\n        document.getElementById('aside-toggle').innerHTML = '&lsaquo;';\n        document.getElementById('bd-viewer').classList.add('opened');\n      }\n    }\n\n    // Modal related methods\n  }, {\n    key: \"_addElementModal\",\n    value: function _addElementModal() {\n      var _this7 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/newelementmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#submit-save').addEventListener('click', function () {\n            var input = [[parseInt(overlay.querySelector('#v1-1').value) || 0, parseInt(overlay.querySelector('#v1-2').value) || 0, parseInt(overlay.querySelector('#v1-3').value) || 0], [parseInt(overlay.querySelector('#v2-1').value) || 0, parseInt(overlay.querySelector('#v2-2').value) || 0, parseInt(overlay.querySelector('#v2-3').value) || 0], [parseInt(overlay.querySelector('#v3-1').value) || 0, parseInt(overlay.querySelector('#v3-2').value) || 0, parseInt(overlay.querySelector('#v3-3').value) || 0]];\n            // Then ensure that there are more than 4 inputs filled\n            var isFilled = 0;\n            for (var i = 0; i < input.length; ++i) {\n              for (var j = 0; j < input[i].length; ++j) {\n                if (input[i][j] > 0) {\n                  ++isFilled;\n                }\n              }\n            }\n            // Not enough filled data\n            if (isFilled < 4) {\n              window.notification.warning({\n                message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n              });\n            } else {\n              var outputElement = {\n                values: input,\n                additionnal: [],\n                comment: overlay.querySelector('#comment').value\n              };\n              // Add additionnal values only if not null\n              if (!isNaN(parseInt(overlay.querySelector('#a1-1').value))) {\n                outputElement.additionnal = [[parseInt(overlay.querySelector('#a1-1').value) || 0, parseInt(overlay.querySelector('#a1-2').value) || 0, parseInt(overlay.querySelector('#a1-3').value) || 0], [parseInt(overlay.querySelector('#a2-1').value) || 0, parseInt(overlay.querySelector('#a2-2').value) || 0, parseInt(overlay.querySelector('#a2-3').value) || 0], [parseInt(overlay.querySelector('#a3-1').value) || 0, parseInt(overlay.querySelector('#a3-2').value) || 0, parseInt(overlay.querySelector('#a3-3').value) || 0]];\n              }\n              // Iterate DB to append new element in proper section\n              for (var _i2 = 0; _i2 < _this7._db.data.length; ++_i2) {\n                if (_this7._db.data[_i2].seriesLength === isFilled) {\n                  if (overlay.querySelector('#switch').checked) {\n                    _this7._db.data[_i2].goAgainst.push(outputElement);\n                  } else {\n                    _this7._db.data[_i2].goFor.push(outputElement);\n                  }\n                }\n              }\n              // Then update local database\n              _this7._fillDatabase(_this7._db);\n              _this7._closeModal({\n                srcElement: {\n                  id: 'close-button'\n                }\n              });\n            }\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"_editElementModal\",\n    value: function _editElementModal(seriesNumber, elementNumber, type) {\n      var _this8 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/newelementmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          // Fill UI with saved value\n          var element = _this8._db.data[seriesNumber][type][elementNumber];\n          overlay.querySelector('#switch').checked = type === 'goFor' ? false : true;\n          overlay.querySelector('#v1-1').value = element.values[0][0] || '';\n          overlay.querySelector('#v1-2').value = element.values[0][1] || '';\n          overlay.querySelector('#v1-3').value = element.values[0][2] || '';\n          overlay.querySelector('#v2-1').value = element.values[1][0] || '';\n          overlay.querySelector('#v2-2').value = element.values[1][1] || '';\n          overlay.querySelector('#v2-3').value = element.values[1][2] || '';\n          overlay.querySelector('#v3-1').value = element.values[2][0] || '';\n          overlay.querySelector('#v3-2').value = element.values[2][1] || '';\n          overlay.querySelector('#v3-3').value = element.values[2][2] || '';\n          // Only fill additionnal if any saved\n          if (element.additionnal.length === 3) {\n            overlay.querySelector('#a1-1').value = element.additionnal[0][0];\n            overlay.querySelector('#a1-2').value = element.additionnal[0][1];\n            overlay.querySelector('#a1-3').value = element.additionnal[0][2];\n            overlay.querySelector('#a2-1').value = element.additionnal[1][0];\n            overlay.querySelector('#a2-2').value = element.additionnal[1][1];\n            overlay.querySelector('#a2-3').value = element.additionnal[1][2];\n            overlay.querySelector('#a3-1').value = element.additionnal[2][0];\n            overlay.querySelector('#a3-2').value = element.additionnal[2][1];\n            overlay.querySelector('#a3-3').value = element.additionnal[2][2];\n          }\n          // Only update comment if any existing\n          if (element.comment !== '') {\n            overlay.querySelector('#comment').value = element.comment;\n          }\n          // Submit event listener\n          overlay.querySelector('#submit-save').addEventListener('click', function () {\n            var input = [[parseInt(overlay.querySelector('#v1-1').value) || 0, parseInt(overlay.querySelector('#v1-2').value) || 0, parseInt(overlay.querySelector('#v1-3').value) || 0], [parseInt(overlay.querySelector('#v2-1').value) || 0, parseInt(overlay.querySelector('#v2-2').value) || 0, parseInt(overlay.querySelector('#v2-3').value) || 0], [parseInt(overlay.querySelector('#v3-1').value) || 0, parseInt(overlay.querySelector('#v3-2').value) || 0, parseInt(overlay.querySelector('#v3-3').value) || 0]];\n            // Then ensure that there are more than 4 inputs filled\n            var isFilled = 0;\n            for (var i = 0; i < input.length; ++i) {\n              for (var j = 0; j < input[i].length; ++j) {\n                if (input[i][j] > 0) {\n                  ++isFilled;\n                }\n              }\n            }\n            // Not enough filled data\n            if (isFilled < 4) {\n              window.notification.warning({\n                message: \"L'indice de valeur de cette serie est inf\\xE9rieur a 4/9\"\n              });\n            } else {\n              var outputElement = {\n                values: input,\n                additionnal: [],\n                comment: overlay.querySelector('#comment').value\n              };\n              // Add additionnal values only if not null\n              if (!isNaN(parseInt(overlay.querySelector('#a1-1').value))) {\n                outputElement.additionnal = [[parseInt(overlay.querySelector('#a1-1').value) || 0, parseInt(overlay.querySelector('#a1-2').value) || 0, parseInt(overlay.querySelector('#a1-3').value) || 0], [parseInt(overlay.querySelector('#a2-1').value) || 0, parseInt(overlay.querySelector('#a2-2').value) || 0, parseInt(overlay.querySelector('#a2-3').value) || 0], [parseInt(overlay.querySelector('#a3-1').value) || 0, parseInt(overlay.querySelector('#a3-2').value) || 0, parseInt(overlay.querySelector('#a3-3').value) || 0]];\n              }\n              // Ensure the element has changed seriesType (ie was goFor, became goAgainst)\n              if (type === 'goFor' && overlay.querySelector('#switch').checked === true || type === 'goAgainst' && overlay.querySelector('#switch').checked === false || seriesNumber !== isFilled) {\n                // Remove from existing series type\n                _this8._removeDatabaseElement(seriesNumber, elementNumber, type);\n                // Now push in new seriesy type\n                for (var _i3 = 0; _i3 < _this8._db.data.length; ++_i3) {\n                  if (_this8._db.data[_i3].seriesLength === isFilled) {\n                    if (overlay.querySelector('#switch').checked) {\n                      _this8._db.data[_i3].goAgainst.push(outputElement);\n                    } else {\n                      _this8._db.data[_i3].goFor.push(outputElement);\n                    }\n                  }\n                }\n                // Manually update db\n                _this8._fillDatabase(_this8._db);\n              } else {\n                // Edit db element (will reload db itself) and close modal\n                _this8._editDatabaseElement(seriesNumber, elementNumber, type, outputElement);\n              }\n              _this8._closeModal({\n                srcElement: {\n                  id: 'close-button'\n                }\n              });\n            }\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"_resultsModal\",\n    value: function _resultsModal(goForCandidates, goAgainstCandidates) {\n      var _this9 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/resultsmodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          // Update modal summary info\n          var v = _this9._input;\n          container.querySelector('#studied-series').innerHTML = \"\\n          \".concat(v[0][0], \", \").concat(v[0][1], \", \").concat(v[0][2], \" / \").concat(v[1][0], \", \").concat(v[1][1], \", \").concat(v[1][2], \" / \").concat(v[2][0], \", \").concat(v[2][1], \", \").concat(v[2][2], \"\\n        \");\n          container.querySelector('#study-stats').innerHTML = \"\\n          Un total de \".concat(goForCandidates.length + goAgainstCandidates.length, \" r\\xE9sultat(s) ont \\xE9t\\xE9 trouv\\xE9s dans la base de donn\\xE9e.<br>\\n          Ces r\\xE9sultats ont \\xE9t\\xE9 trouv\\xE9s en \").concat(((_this9._perf.db.m2 - _this9._perf.db.m1) / 1000).toFixed(3), \" seconde(s).<br><br>\\n          Le nombre de r\\xE9sultats \\xE0 afficher par cat\\xE9gorie est de <b>\").concat(_this9._resultsAmount, \"</b>.<br>\\n          La tol\\xE9rance pour les calculs entre dizaines est de <b>\").concat(_this9._tensThreshold, \"</b>.<br>\\n          La pr\\xE9cision minimale pour ces r\\xE9sultats est de <b>\").concat(_this9._precision, \"%</b>.\\n        \");\n          // Update GUI with best candidates\n          for (var i = 0; i < _this9._resultsAmount; ++i) {\n            // Only add goFor candidate if exists in results\n            if (goForCandidates[i]) {\n              var goForElement = _this9.__buildDatabaseElement(goForCandidates[i].series);\n              var goForItem = document.createElement('DIV');\n              goForItem.classList.add('category-item');\n              goForItem.innerHTML = \"\\n              <h4>\".concat(100 - goForCandidates[i].distance, \"%</h4>\\n            \");\n              goForItem.appendChild(goForElement);\n              container.querySelector('#go-for').appendChild(goForItem);\n            } else if (container.querySelector('#go-for').innerHTML === '') {\n              var element = document.createElement('P');\n              element.innerHTML = '<b>Aucun résultats pour cette catégorie</b>';\n              container.querySelector('#go-for').appendChild(element);\n            }\n            // Same goes for goAgainst candidates\n            if (goAgainstCandidates[i]) {\n              var goAgainstElement = _this9.__buildDatabaseElement(goAgainstCandidates[i].series);\n              var goAgainstItem = document.createElement('DIV');\n              goAgainstItem.classList.add('category-item');\n              goAgainstItem.innerHTML = \"\\n              <h4>\".concat(100 - goAgainstCandidates[i].distance, \"%</h4>\\n            \");\n              goAgainstItem.appendChild(goAgainstElement);\n              container.querySelector('#go-against').appendChild(goAgainstItem);\n            } else if (container.querySelector('#go-against').innerHTML === '') {\n              var _element = document.createElement('P');\n              _element.innerHTML = '<b>Aucun résultats pour cette catégorie</b>';\n              container.querySelector('#go-against').appendChild(_element);\n            }\n          }\n          var scroll = new window.ScrollBar({\n            target: container.querySelector('.results-wrapper'),\n            minSize: 200,\n            style: {\n              color: '#758C78'\n            }\n          });\n\n          // Force raf after scroll creation to make scrollbar properly visible\n          requestAnimationFrame(function () {\n            scroll.updateScrollbar();\n          });\n          overlay.appendChild(container);\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"_clearDatabaseModal\",\n    value: function _clearDatabaseModal() {\n      var _this10 = this;\n      if (this._db === null) {\n        this._clearDatabase();\n        return;\n      }\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/cleardatabasemodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#save-button').addEventListener('click', function () {\n            _this10._exportDatabase();\n            _this10._closeModal({\n              srcElement: {\n                id: 'close-button'\n              }\n            });\n          });\n          overlay.querySelector('#confirm-button').addEventListener('click', function () {\n            _this10._clearDatabase();\n            _this10._closeModal({\n              srcElement: {\n                id: 'close-button'\n              }\n            });\n          });\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"_infoModal\",\n    value: function _infoModal() {\n      var _this11 = this;\n      var overlay = document.getElementById('modal-overlay');\n      // Open modal event\n      fetch(\"assets/html/infomodal.html\").then(function (data) {\n        overlay.style.display = 'flex';\n        data.text().then(function (htmlString) {\n          var container = document.createRange().createContextualFragment(htmlString);\n          overlay.appendChild(container);\n          overlay.querySelector('#app-version').innerHTML = _this11._version;\n          setTimeout(function () {\n            return overlay.style.opacity = 1;\n          }, 50);\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"_closeModal\",\n    value: function _closeModal(e) {\n      if (e.srcElement.id !== 'modal-overlay' && e.srcElement.className !== 'close-modal' && e.srcElement.id !== 'close-button') {\n        return;\n      }\n      var overlay = document.getElementById('modal-overlay');\n      if (overlay.style.display === 'flex') {\n        overlay.style.opacity = 0;\n        setTimeout(function () {\n          overlay.innerHTML = '';\n          overlay.style = '';\n        }, 400);\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LPSA);\n\n//# sourceURL=webpack://LPSA/./src/js/LPSA.js?");

/***/ }),

/***/ "./src/js/utils/DnD.js":
/*!*****************************!*\
  !*** ./src/js/utils/DnD.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar DnD = /*#__PURE__*/function () {\n  /** @summary <h1>A DnD simple implementation to convert any DOM element into a drop content handler</h1>\r\n   * @author Arthur Beaulieu\r\n   * @since March 2019\r\n   * @description <blockquote>This class aims to propose a drag and drop abstraction, so you can focus on the dropped content handling only.\r\n   * Instantiate this with a DOM target, and a file handler callback in which you might do your treatments with the dropped file(s).</blockquote>\r\n   * @param {Object} options - The DnD class arguments object\r\n   * @param {String} options.target - The DnD target DOM element query selector\r\n   * @param {Function} options.onDropFile - The callback to call when a file is handled */\n  function DnD(options) {\n    _classCallCheck(this, DnD);\n    try {\n      /** @private\r\n       * @member {Object} - The DnD container DOM node */\n      this._container = document.querySelector(options.target); // Get given target from the DOM\n      /** @private\r\n       * @member {Function} - The file handler callback */\n      this._onDropFileCB = options.onDropFile; // Assign the onDropFile callback to an internal\n      /** @private\r\n       * @member {String} - The target default border rule (to properly restor border on leave/end) */\n      this._borderStyle = this._container.style.border; // Back target border style to restore it on leave/drop events\n      this._events(); // Attach all drag events\n    } catch (error) {\n      // Mostly handle the case in which the target selector given as an argument is wrong\n      console.error(\"Unable to build the DnD class.\\n\".concat(error));\n    }\n  }\n\n  /** @method\r\n   * @name formatAsJSON\r\n   * @static\r\n   * @memberof DnD\r\n   * @description <blockquote>Convert a raw dropped content into a JSON object</blockquote> */\n  return _createClass(DnD, [{\n    key: \"_events\",\n    value:\n    /** @method\r\n     * @name _events\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>Attach to the container all the needed drag/drop events</blockquote> */\n    function _events() {\n      this._container.addEventListener('dragenter', this._dragEnter.bind(this), false);\n      this._container.addEventListener('dragover', this._dragOver.bind(this), false);\n      this._container.addEventListener('dragleave', this._dragLeave.bind(this), false);\n      this._container.addEventListener('drop', this._drop.bind(this), false);\n    }\n\n    /** @method\r\n     * @name _eventBehavior\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>Stops the given event propagation and default behavior</blockquote>\r\n     * @param {Event} event - The event to change behavior from */\n  }, {\n    key: \"_eventBehavior\",\n    value: function _eventBehavior(event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n    /** @method\r\n     * @name _dragEnter\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User entered the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragEnter\",\n    value: function _dragEnter(event) {\n      this._eventBehavior(event);\n      this._container.style.border = 'dashed 6px rgb(255, 100, 100)';\n    }\n\n    /** @method\r\n     * @name _dragOver\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User hovers the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragOver\",\n    value: function _dragOver(event) {\n      this._eventBehavior(event);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n\n    /** @method\r\n     * @name _dragLeave\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User left the target div with a dragged content under mouse</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_dragLeave\",\n    value: function _dragLeave(event) {\n      if (event.relatedTarget === null) {\n        this._eventBehavior(event);\n        this._container.style.border = this._borderStyle;\n      }\n    }\n\n    /** @method\r\n     * @name _drop\r\n     * @private\r\n     * @memberof DnD\r\n     * @description <blockquote>User dropped content on the target div</blockquote>\r\n     * @param {Event} event - The event to handle */\n  }, {\n    key: \"_drop\",\n    value: function _drop(event) {\n      var _this = this;\n      this._eventBehavior(event);\n      this._container.style.border = this._borderStyle;\n      var files = event.dataTransfer.files;\n      for (var i = 0; i < files.length; ++i) {\n        var reader = new FileReader();\n        reader.onload = function (theFile) {\n          return function (raw) {\n            _this._onDropFileCB(theFile, raw);\n          };\n        }(files[i]);\n        reader.readAsText(files[i]);\n      }\n    }\n  }], [{\n    key: \"formatAsJSON\",\n    value: function formatAsJSON(raw) {\n      return JSON.parse(raw);\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DnD);\n\n//# sourceURL=webpack://LPSA/./src/js/utils/DnD.js?");

/***/ }),

/***/ "./src/scss/LPSA.scss":
/*!****************************!*\
  !*** ./src/scss/LPSA.scss ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://LPSA/./src/scss/LPSA.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/LPSA.js");
/******/ 	window.LPSA = __webpack_exports__["default"];
/******/ 	
/******/ })()
;